# 3장 di 설정방법 4가지

스프링부트에서는 xml 파일이 아닌 자바로 환경을 설정하기때문에 그 방법도 포함해서 4가지 방법을 알아본다.

우선 연습용 프로젝트를 생성하고 pom.xml에 lombok 라이브러리를 포함시킨다.
없어도 지장은 없으나 클래스를 간편하게 세팅할수 있게 만드는 편한 라이브러리

그리고 이번에 필요한 라이브러리가 cglib 라는것인데 maven repository 사이트에 가서 복붙만 해오면 된다. (이 기능이 xml 대신 자바에서 파싱할수 있는 클래스를 정의하는 것)


## 1번 방법은

어제부터 했던 xml로 정의하는 방법이라 생략

## 2번방법은 

자바 클래스를 만들고 클래스명 위에 @Configuration 를 선언한다. 
이건 단순한 객체용 클래스가 아니고 xml대신 정의하는 설정 파일이라는것을 명시한다.

bean생성은 @Bean 어노테이션 아래에서 객체를 리턴하는 메소드를 정의한다.
(메소드이름이 빈 객체변수명이다)
메소드 내에서 객체를 생성자함수로 생성하고, setter로 속성도 정의하고 객체를 리턴한다.

메인메서드에서는 AnnotationConfigApplicationContext 컨테이너객체를 생성해서 생성자함수 매개변수에 설정 클래스를 넣고 불러온다. 그 후에 컨테이너객체의 getBean메서드를 사용해서 빈을 가져올 수 있게 된다. 

xml은 GenericXmlApplicationContext객체로 불러올때 사용했던 클래스. 둘다 상속관계에 있는 형태라 연관성이 짙다.

## 3번 방법은

xml안에 java파일을 포함시켜서 한번에 파싱하는 방법
메인메서드에서 컨테이너 객체를 따로 생성해서 각각 불러오지 않는 이유는 컨테이너를 두개 만들게 되기 때문. 컨테이너는 하나만

xml 파일의 Namespaces 항목을 보면 이런저런 기능을 추가할수있는데 p라는 속성은 빈 객체를 생성할때 프로퍼티를 속성으로 bean태그 안에서 쉽게 작성 할수 있는것이다. 비슷하게 c 속성도 있다.

Namespaces에서 context를 체크하면 <context:annotation-config/> 를 사용할 수 있다. 이 설정을 적용해야 class내 annotation을 해석하게 된다.

그후에 <bean class="자바파일경로">를 넣어주면 스프링은 이 빈객체를 그냥 단순히 객체용 클래스로 생각해서 넘어가는게 아니라 어노테이션을 해석해서 이 클래스를 파싱하게 된다.
이 클래스에 @Configuration, @Bean 등을 활용해서 빈 설정을 마치면  자바파일을 xml안에 포함시키는 형태가 되는 것이다.

## 4번방법은
java 안에 xml 파일을 포함시켜서 한번에 파싱

이것도 간단하다
클래스 위에 어노테이션으로
@ImportResource(xml경로) 를 명시하면 끝난다























