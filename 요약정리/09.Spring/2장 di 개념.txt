# DI 개념 및 활용

![di](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FlrZlY%2Fbtr77f3m17k%2F71hZKGhF8WOOZ1xMm3SuhK%2Fimg.png)

의존성(Dependency)이란, 하나의 객체가 다른 객체없이 제대로 된 역할을 할 수 없다는 것을 의미. 
하나의 객체가 다른 객체의 상태에 따라 영향을 받는다. A 객체가 B 객체 없이 동작이 불가능한 상황을 'A가 B에 의존적이다'라고 표현한다.

주입(Injection)이란, 외부에서 밀어넣는 것을 의미한다. 그동안은 객체를 직접 생성해서 주입했지만 외부에서 생성 후 주입하는 것이 스프링에서의 의존성 주입이다.

스프링에서는 xml파일로 모든 설정을 관리하고 빈 객체를 생성한다.
프로그램 구동시 IOC컨테이너에서 이 프로젝트에 필요한 객체들을 만들어 놓고 필요할때 사용 되는 원리이다. 

자바 프로젝트 내 리소스 디렉토리에서 bean comfig 파일(xml)을 만들어서
<bean></bean>을 만들어서 (객체생성) 사용

xml에서 객체를 생성하고 setter로 멤버변수를 입력할수 있는데 기초데이터타입은 
<property>
	<value>10</value>
</property>
이런식으로 할수있지만 참조데이터타입은
<ref bean="객체변수"/>
value 대신 ref를 이용해서 참조해야 한다.
배열관련 타입은 <list><value></value>... </list>로 작성한다.

혹은 생성자 함수를 이용해서 세팅하는 방법도 있다.
<constructor-arg>
	<value>홍길동</value>
</constructor-arg>
이런식으로 constructor-arg를 이용해서 생성자함수에 매개변수를 넣는것이다.
단 주의점으로는 생성자 함수를 정의할때 매개변수 순서를 정의한 순서대로 꼭 지켜야 한다.

xml파일의 Namespace 탭에 가보면 p 속성이나 c 속성을 적용할수 있는데 이 기능은 'constructor-arg'요소 없이, 인라인 속성으로 생성자 매개변수를 설정할 수 있게 해준다. 

리소스폴더는 classpath 라고 부른다. 이 경로로 외부파일에 쉽게 접근해서 사용할 수 있다.

원래 웹프로젝트는 자동적으로 xml을 파싱하는 기능이 있지만 지금은 연습용 프로젝트이기 때문에 직접 메인메서드에서 컨테이너객체를 생성해서 파싱해봅니다.

AbstractApplicationContext ctx = new GenericXmlApplicationContext("classpath:applicationCTX.xml");

생성한 컨테이너 객체로 getBean()메서드를 통해 생성된 빈객체를 불러올수 있습니다.






---------------------------------------------




DI(Dependency Injection; 의존주입 = 부품조립)와 IOC 컨테이너(Inversion of Control ; 컴포넌트의 재사용을 용이하게 해주고 단위 테스트를 쉽게 할 수 있도록 지원하는 스프링, Spring)

결국 스프링이란 필요한 객체를 생성하고 조립하는 라이브러리 집합체라고 할 수 있다



## 스프링 컨테이너의 이해

// xml파일경로
String resourceLocation = "classpath:bmi/applicationCTX3.xml";
// 스프링 컨테이너 생성
AbstractApplicationContext ctx = new GenericXmlApplicationContext(resourceLocation);
// 스프링 컨테이너에서 컴포넌트 가져오기
MyInfo myInfo = ctx.getBean(“myInfo”, MyInfo.class);
myInfo.getInfo();
ctx.close();

// AbstractApplicationContext 추상클래스 위로는 ApplicationContext 인터페이스 밑으로 상속받는 얘들중의 하나가 GenericXmlApplicationContext. 매개변수로 위치를 주면 IOC 컨테이너(스프링 컨테이너)가 생성. 즉 부품이 된 거임. 그 부품에서 “myInfo”라는 빈(이 안에도 bmiCalculator 주입됨)을 뽑아서 myInfo라는 변수에 넣음. 객체를 생성하고 조립하는 것을 Spring 컨테이너가 하고 있음


## 의존 관계
- DI는 Dependency Injection의 약자로 우리말로 하면 ‘의존하는 객체를 주입하는 것‘ 입니다.
- 의존주입은 setter를 통한 주입과 생성자를 통한 주입이 있습니다.
- xml파일을 이용한 의존주입(아래의 예제는 studentInfo객체는 student객체에 의존하고 있다)

<bean id="studentInfo" class="com.lec.ex.StudentInfo">
	<!-- <constructor-arg ref="student1"/> -->
	<constructor-arg>
		<ref bean="student1"/>
	</constructor-arg>
</bean>

- java파일을 이용한 의존주입
Student student2 = ctx.getBean(“student2”,Student.class);
studentInfo.setStudent(student2);
studentInfo.getStudentInfo();

Xml에 bean으로 주입해 쓰다가 맘에 안 들면 java 코드에서 다른 bean을 주입해서 쓸 수도 있다


## DI 사용에 따른 장점

아직은 스프링의 DI사용에 따른 장점을 많이 느끼지 못할 수 있습니다. 또는 DI를 사용하니 더욱 복잡하고 시간이 더 많이 소요된다고 생각 할 수 있습니다. (oop언어를 배울 때, class 나온 후 interface가 나온다. Interface는 구현도 없고 선언만 하는데 굳이 interface를 만들까 생각하지만 interface를 만들므로 타입을 통일시킬 수 있고, 강제로 오버라이드하게 해서 작업을 통일시킬 수 있다는 여러가지 장점이 있다. 이 장점은 규모가 큰 프로젝트를 할수록 느낄 수 있게 된다)

사실 작은 규모의 프로젝트에서는 스프링의 DI사용을 하는 것 보다 일반적인 방법을 사용하여 개발하는 것이 더욱 빠르고, 개발에 따른 스트레스를 줄일 수 있습니다. 하지만 규모가 어느 정도 커지고, 추후 유지보수 업무가 발생시에는 DI를 이용한 개발의 장점을 느낄 수 있습니다.

스프링 DI사용에 따른 장점을 예제를 통해 살펴 봅니다. 자바파일의 수정 없이 스프링 설정 파일만을 수정하여 부품들을 생성/조립하고 있는 예제입니다









