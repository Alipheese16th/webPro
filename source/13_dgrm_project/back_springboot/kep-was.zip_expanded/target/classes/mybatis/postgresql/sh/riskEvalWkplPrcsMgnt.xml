<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kist.portal.sh.riskeval.mapper.RiskEvalWkplPrcsMgntMapper">

	<select id="selectRiskEvalWkplPrcsMgntList" parameterType="sqlMap" resultType="sqlMap">
		/* selectRiskEvalWkplPrcsMgntList */
		with recursive dngp_tree 
			 (dngp_id
			 ,up_dngp_id
			 ,wkpl_id
			 ,dngp_nm
			 ,usg_yn
			 ,level
			 ,level1_cd
			 ,level1_nm
			 ,level2_cd
			 ,level2_nm
			 ,level3_cd
			 ,level3_nm
			 ,path
			 ,sort_sn
			 ,cycle
			 ) as
			(select a.dngp_id as dngp_id
			       ,a.upp_dngp_id as up_dngp_id
			       ,a.wkpl_id as wkpl_id 
			       ,a.dngp_nm
			       ,a.usg_yn 
			       ,0
			       ,a.dngp_id::text as level1_cd
			       ,a.dngp_nm::text as level1_nm
			       ,''::text as level2_cd
			       ,''::text as level2_nm
			       ,''::text as level3_cd
			       ,''::text as level3_nm
			       ,concat(lpad(a.sort_sn::text,4,'0'), '-', a.dngp_id)::text as path
			       ,a.sort_sn
			       ,false
			   from tb_sh_risk_dngp a
			  where a.upp_dngp_id = ''
			  	and a.del_yn = 'N'
			  <if test='usg_yn != null and usg_yn != ""'>
			  	and a.usg_yn = 'Y'
			  </if>
			  union all
			 select a.dngp_id as dngp_id
			       ,a.upp_dngp_id as up_dngp_id
			       ,a.wkpl_id as wkpl_id 
			       ,a.dngp_nm
			       ,a.usg_yn  
			       ,b.level + 1
			       ,b.level1_cd
			       ,b.level1_nm
			       ,(case when b.level = 0 then a.dngp_id else b.level2_cd end) as level2_cd
			       ,(case when b.level = 0 then a.dngp_nm else b.level2_nm end) as level2_nm
			       ,(case when b.level = 1 then a.dngp_id else '' end) as level3_cd
			       ,(case when b.level = 1 then a.dngp_nm else '' end) as level3_nm
			       ,b.path || '.' || concat(lpad(a.sort_sn::text,4,'0'), '-', a.dngp_id) as path
			       ,a.sort_sn
			       ,a.dngp_id = b.path
			   from tb_sh_risk_dngp a
			   join dngp_tree b on a.upp_dngp_id = b.dngp_id
			   	and a.del_yn = 'N'
			  <if test='usg_yn != null and usg_yn != ""'>
			  	and a.usg_yn = 'Y'
			  </if>
			  where not cycle
			)
		select a.dngp_id
		      ,a.up_dngp_id
		      ,a.wkpl_id
		      ,fn_get_cmpy(wkpl_id, 'nm', #{SESS_LANG}) as cmpy_nm
		      ,fn_get_cd('ST00000002', wkpl_id, 'nm', #{SESS_LANG}) as wkpl_nm
		      ,a.dngp_nm
		      ,a.usg_yn
		      ,a.level as level
		      ,a.level1_cd
		 	  ,a.level1_nm
			  ,a.level2_cd
			  ,a.level2_nm
			  ,a.level3_cd
			  ,a.level3_nm
		      ,a.path
		      ,b.dgsn_apal_id1 as id1
		      ,b.crt_dt1 as date1
		      ,b.dgsn_apal_id2 as id2
		      ,b.crt_dt2 as date2
		      ,b.dgsn_apal_id3 as id3
		      ,b.crt_dt3 as date3
		      ,b.dgsn_apal_id4 as id4
		      ,b.crt_dt4 as date4
		  from (select dngp_id
				      ,up_dngp_id
				      ,wkpl_id
				      ,fn_get_cmpy(wkpl_id, 'nm', #{SESS_LANG}) as cmpy_nm
				      ,fn_get_cd('ST00000002', wkpl_id, 'nm', #{SESS_LANG}) as wkpl_nm
				      ,dngp_nm
				      ,usg_yn
				      ,level+1 as level
				      ,level1_cd
				 	  ,level1_nm
					  ,level2_cd
					  ,level2_nm
					  ,level3_cd
					  ,level3_nm
				      ,path
				 from dngp_tree a
				where 1 = 1
				 <if test='wkpl_id != null and wkpl_id != ""'>
				  and wkpl_id = #{wkpl_id}
				 </if>
				 <if test='level != null and level != ""'>
				  and level = #{level}::INTEGER
				 </if>
				order by path	
		       ) a
		  left outer
		  join (select a.lrcl_dngp_id
				      ,a.mdcl_dngp_id
				      ,a.smcl_dngp_id
				      ,max(a.dgsn_apal_id1) as dgsn_apal_id1
				      ,to_char(max(a.crt_dt1), 'YYYY-MM-DD') as crt_dt1
				      ,max(a.dgsn_apal_id2) as dgsn_apal_id2
				      ,to_char(max(a.crt_dt2), 'YYYY-MM-DD') as crt_dt2
				      ,max(a.dgsn_apal_id3) as dgsn_apal_id3
				      ,to_char(max(a.crt_dt3), 'YYYY-MM-DD') as crt_dt3
				      ,max(a.dgsn_apal_id4) as dgsn_apal_id4
				      ,to_char(max(a.crt_dt4), 'YYYY-MM-DD') as crt_dt4
				  from (select a.lrcl_dngp_id
						      ,a.mdcl_dngp_id
						      ,a.smcl_dngp_id 
						      ,a.dgsn_apal_id
						      ,a.crt_dt
						      ,a.rnk
						      ,(case when a.rnk = '1'
						      		 then a.dgsn_apal_id
						      		 else null
						      	 end) as dgsn_apal_id1
						      ,(case when a.rnk = '1'
						      		 then a.crt_dt
						      		 else null
						      	 end) as crt_dt1
						      ,(case when a.rnk = '2'
						      		 then a.dgsn_apal_id
						      		 else null
						      	 end) as dgsn_apal_id2
						      ,(case when a.rnk = '2'
						      		 then a.crt_dt
						      		 else null
						      	 end) as crt_dt2
						      ,(case when a.rnk = '3'
						      		 then a.dgsn_apal_id
						      		 else null
						      	 end) as dgsn_apal_id3
						      ,(case when a.rnk = '3'
						      		 then a.crt_dt
						      		 else null
						      	 end) as crt_dt3
						      ,(case when a.rnk = '4'
						      		 then a.dgsn_apal_id
						      		 else null
						      	 end) as dgsn_apal_id4
						      ,(case when a.rnk = '4'
						      		 then a.crt_dt
						      		 else null
						      	 end) as crt_dt4
						  from (select a.lrcl_dngp_id
								      ,a.mdcl_dngp_id
								      ,b.smcl_dngp_id
								      ,a.dgsn_apal_id
								      ,a.crt_dt
								      ,row_number() over(partition by a.lrcl_dngp_id
																     ,a.mdcl_dngp_id
																     ,b.smcl_dngp_id
														     order by a.lrcl_dngp_id
																     ,a.mdcl_dngp_id
																     ,b.smcl_dngp_id
																     ,a.crt_dt desc
													    ) as rnk
								  from tb_sh_risk_dgsn_apal a
								 inner 
								  join tb_sh_risk_dgsn_apal_dtl b
								    on a.dgsn_apal_id = b.dgsn_apal_id
								 where a.del_yn = 'N'
								   and b.del_yn = 'N'
								 group by a.lrcl_dngp_id
								  	     ,a.mdcl_dngp_id
								  	     ,b.smcl_dngp_id
								  	     ,a.dgsn_apal_id
								         ,a.crt_dt
						  	   ) a
						 where a.rnk between 1 and 4
				        ) a
				  group by a.lrcl_dngp_id
					      ,a.mdcl_dngp_id
					      ,a.smcl_dngp_id
		       ) b
	        on a.level1_cd = b.lrcl_dngp_id
	           and a.level2_cd = b.mdcl_dngp_id
	           and a.level3_cd = b.smcl_dngp_id
	</select>
	
	<select id="selectDngpId" parameterType="sqlMap" resultType="String">
		select lpad(nextval('tb_sh_risk_dngp_seq')::text, 8, '0') as dngp_id
	</select>
	
	<insert id="insertRiskEvalWkplPrcsMgnt" parameterType="sqlMap">    	
      	/* insertRiskEvalWkplPrcsMgnt */
      	insert into tb_sh_risk_dngp (
      		dngp_id
      		,upp_dngp_id
      		,wkpl_id
      		,dngp_nm
      		,sort_sn
      		,crt_usr_id
      		,upt_usr_id
      	) values (
      		#{dngp_id}
      		,#{upp_dngp_id}
      		,#{wkpl_id}
      		,#{dngp_nm}
      		,case when #{subcategory}::text  = '1' then (select coalesce(max(sort_sn), 0) + 1 as sort_sn from tb_sh_risk_dngp where upp_dngp_id = #{upp_dngp_id})::INTEGER
								   			   else #{sort_sn}::INTEGER end
      		,#{SESS_USR_ID}
      		,#{SESS_USR_ID}
      	)
    </insert>
    
    <insert id="insertRiskEvalWkplPrcsMgnt2" parameterType="sqlMap">
    	<selectKey keyProperty="dngp_id" resultType="String" order="BEFORE">
        	select lpad(nextval('tb_sh_risk_dngp_seq')::text, 8, '0') as dngp_id
    	</selectKey>
    	  	
      	/* insertRiskEvalWkplPrcsMgnt */
      	insert into tb_sh_risk_dngp (
      		dngp_id
      		,upp_dngp_id
      		,wkpl_id
      		,dngp_nm
      		,sort_sn
      		,crt_usr_id
      		,upt_usr_id
      	) values (
      		#{dngp_id}
      		,#{upp_dngp_id}
      		,#{wkpl_id}
      		,#{dngp_nm}
      		,(select coalesce(max(sort_sn), 0) + 1 as sort_sn from tb_sh_risk_dngp where upp_dngp_id = #{upp_dngp_id})::INTEGER
      		,#{SESS_USR_ID}
      		,#{SESS_USR_ID}
      	)
    </insert>
    
    <update id="updateRiskEvalWkplPrcsMgnt" parameterType="sqlMap">
        /* updateRiskEvalWkplPrcsMgnt */
        update tb_sh_risk set
        	wkpl_id = #{wkpl_id}
			,dngp_nm = #{dngp_nm}
			,sort_sn = #{sort_sn}::INTEGER
			,usg_yn = #{usg_yn}
			,upt_usr_id = #{SESS_USR_ID}
			,upt_dt = statement_timestamp()
		where dngp_id = #{dngp_id}
    </update>
    
    <update id ="deleteRiskEvalWkplPrcsMgnt" parameterType="sqlMap">
    	/* delRiskEvalWkplPrcsMgnt */
        update tb_sh_risk_dngp set	
        	del_yn = 'Y'
			,upt_usr_id  = #{SESS_USR_ID}
		    ,upt_dt = statement_timestamp()
		 where dngp_id = #{dngp_id}
    </update>
    
	<select id="selectRiskEvalWkplPrcsMgnt" parameterType="sqlMap" resultType="sqlMap">
		/* selectRiskEvalWkplPrcsMgnt */
		select
			dngp_id as dngp_id
			,dngp_nm
		from
			tb_sh_risk_dngp
		where
			 upp_dngp_id = #{upp_dngp_id}
		<if test='usg_yn != null and usg_yn != ""'>
			and usg_yn = 'Y'
		</if>
			and del_yn = 'N'
	 	order by sort_sn asc;
			    
	</select>
	
	<select id="selectRiskEvalWkplDngpList" parameterType="sqlMap" resultType="sqlMap">
		with recursive recur_data as(
			select 
					*
				  	,"dngp_id" as up_key
				  	,"dngp_nm" as up_nm
				  	,'' || dngp_id as "keys"
				    ,1 as level
			  from  tb_sh_risk_dngp
			  where upp_dngp_id = ''
			UNION
			select
					b.*
					,a.up_key
					,a.up_nm
					,a.dngp_id || ',' || b.dngp_id as keys
					,a.level + 1
			  from  recur_data a
			  join
			  	    tb_sh_risk_dngp b
			  	on 	a.dngp_id = b.upp_dngp_id
		)
		select 
			   dngp_id as dngp_id
			   ,upp_dngp_id as up_dngp_id
			   ,dngp_nm
			   ,wkpl_id as wkpl_id
			   ,level
		  from recur_data
		   <![CDATA[
		  where level <= 2
		   ]]>
	</select>
</mapper>