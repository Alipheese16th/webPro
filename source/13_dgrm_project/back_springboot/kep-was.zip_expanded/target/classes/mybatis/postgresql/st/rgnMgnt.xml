<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kist.portal.st.stndinfr.mapper.RgnMgntMapper">

	<!-- 지역도 목록 조회 -->
	<select id="selectRgnmgntList" parameterType="sqlMap" resultType="sqlMap">
		/* selectRgnmgntList  */
		with recursive apchems_menu 
		 (wkpl_loc_id
		 ,upp_wkpl_loc_id
		 ,wkpl_loc_nm
		 ,upp_incl_wkpl_loc_nm
		 ,usg_yn
		 ,level
		 ,path
		 ,cycle
		 ,addbtn
		 ,sort_sn
		 ,wkpl_id
		 ,cmpy_nm
		 ,wkpl_loc_atfl_no
		 ) as
		(select swl.wkpl_loc_id::text as wkpl_loc_id
		       ,swl.upp_wkpl_loc_id 
		       ,swl.wkpl_loc_nm 
		       ,swl.upp_incl_wkpl_loc_nm
		       ,swl.usg_yn 
		       ,0
		       ,array[concat(lpad(swl.sort_sn::text,4,'0'), '/', swl.wkpl_loc_id)]
		       ,false
		       ,fn_get_mlang('LB00000047', 'KO')
		       ,swl.sort_sn 
		       ,swl.wkpl_id
		       ,fn_get_cmpy(swl.wkpl_id, 'NM', #{SESS_LANG}) as cmpy_nm
			   ,swl.wkpl_loc_atfl_no
		   from tb_sh_wkpl_loc swl
		  where swl.upp_wkpl_loc_id = '' 
		  union all
		 select swl.wkpl_loc_id
		       ,swl.upp_wkpl_loc_id 
		       ,swl.wkpl_loc_nm 
		       ,swl.upp_incl_wkpl_loc_nm
		       ,swl.usg_yn
		       ,am.level + 1
		       ,array_append(am.path, concat(lpad(swl.sort_sn::text,4,'0'), '/', swl.wkpl_loc_id))
		       ,swl.wkpl_loc_id = ANY(am.path)
		       <![CDATA[
		       ,case when am.level  <  0 then fn_get_mlang('LB00000047', 'KO') else '' end
		       ]]>
		       ,swl.sort_sn
		       ,swl.wkpl_id
		       ,fn_get_cmpy(swl.wkpl_id, 'NM', #{SESS_LANG}) as cmpy_nm
		       ,swl.wkpl_loc_atfl_no
		   from tb_sh_wkpl_loc swl
		   join apchems_menu am on swl.upp_wkpl_loc_id = am.wkpl_loc_id
		  where not cycle
		)
		select false as chk_yn
		      ,wkpl_loc_id
		      ,upp_wkpl_loc_id
		      ,coalesce((select swl3.wkpl_loc_nm
		          from tb_sh_wkpl_loc swl3
		         where am.upp_wkpl_loc_id = swl3.wkpl_loc_id), fn_get_cd('ST00000002', am.wkpl_id,'NM', 'KO')) as upp_wkpl_loc_nm
		      ,wkpl_loc_nm
		      ,upp_incl_wkpl_loc_nm
		      ,usg_yn
		      ,level+1 as level
		      ,path
		      ,addbtn
		      ,sort_sn
		      ,wkpl_id
		      ,cmpy_nm
		      <![CDATA[
		      ,(select case when count(*) > 0 then 'N'
		      ]]>
		      				else 'Y' end
		      	  from tb_sh_wkpl_loc swl2
		      	 where swl2.wkpl_loc_id = am.wkpl_loc_id
		      	   and usg_yn = 'Y'
		      	   and am.wkpl_loc_id in (select swl3.upp_wkpl_loc_id
		      	   							     from tb_sh_wkpl_loc swl3
		      	   							    where usg_yn = 'Y')) as del_yn
			  ,case when wkpl_loc_atfl_no is null
						then '추가'
					else '수정'
			   end as addbtn_locmap
			  ,wkpl_loc_atfl_no
		 from apchems_menu am
		where 1=1
		<if test='cmpy_cd != null and cmpy_cd != ""'>
		   and exists (select 1
		      			 from tb_sh_wkpl w
		      			where w.wkpl_id = am.wkpl_id 
		      			  and w.cmpy_cd = #{cmpy_cd}
		   			  )
		 </if>
		<if test='wkpl_id != null and wkpl_id != ""'>
		  and wkpl_id = #{wkpl_id}
		</if>
		<if test='usg_yn != null and usg_yn != ""'>
		  and usg_yn = #{usg_yn}
		</if>
		 order by path
	</select>
	
	<!-- 지역도 목록 코드 조회 -->
	<select id="selectRgnmgntCdList" parameterType="sqlMap" resultType="sqlMap">
		/* selectRgnmgntCdList  */
		select wkpl_id 
		      ,wkpl_loc_id as cd
		      ,wkpl_loc_nm as cd_nm
		      ,upp_wkpl_loc_id
		  from tb_sh_wkpl_loc
		 where usg_yn = 'Y'
	</select>
	
	<!-- 지역도 목록 코드 조회 -->
	<select id="selectRgnmgntPopList" parameterType="sqlMap" resultType="sqlMap">
		/* selectRgnmgntPopList  */
		with recursive apchems_menu 
		 (wkpl_loc_id
		 ,upp_wkpl_loc_id
		 ,wkpl_loc_nm
		 ,upp_incl_wkpl_loc_nm
		 ,usg_yn
		 ,level
		 ,path
		 ,cycle
		 ,addbtn
		 ,sort_sn
		 ,wkpl_id
		 ) as
		(select swl.wkpl_loc_id::text as wkpl_loc_id
		       ,swl.upp_wkpl_loc_id 
		       ,swl.wkpl_loc_nm 
		       ,swl.upp_incl_wkpl_loc_nm
		       ,swl.usg_yn 
		       ,0
		       ,array[concat(lpad(swl.sort_sn::text,4,'0'), '/', swl.wkpl_loc_id)]
		       ,false
		       ,fn_get_mlang('LB00000047', 'KO')
		       ,swl.sort_sn 
		       ,swl.wkpl_id
		   from tb_sh_wkpl_loc swl
		  where swl.upp_wkpl_loc_id = '' 
		  union all
		 select swl.wkpl_loc_id
		       ,swl.upp_wkpl_loc_id 
		       ,swl.wkpl_loc_nm 
		       ,swl.upp_incl_wkpl_loc_nm
		       ,swl.usg_yn
		       ,am.level + 1
		       ,array_append(am.path, concat(lpad(swl.sort_sn::text,4,'0'), '/', swl.wkpl_loc_id))
		       ,swl.wkpl_loc_id = ANY(am.path)
		       <![CDATA[
		       ,case when am.level  <  0 then fn_get_mlang('LB00000047', 'KO') else '' end
		       ]]>
		       ,swl.sort_sn
		       ,swl.wkpl_id
		   from tb_sh_wkpl_loc swl
		   join apchems_menu am on swl.upp_wkpl_loc_id = am.wkpl_loc_id
		  where not cycle
		)
		select wkpl_id
		      ,fn_get_cd('ST00000002', am.wkpl_id,'NM', 'KO') as wkpl_nm
		      ,wkpl_loc_id
		      ,wkpl_loc_nm
		      ,upp_wkpl_loc_id
		      ,upp_incl_wkpl_loc_nm
		      ,path
		 from apchems_menu am
		where 1=1
		  and usg_yn = 'Y'
		  <if test='wkpl_id != null and wkpl_id != "" and wkpl_bud_id != null and wkpl_bud_id != "" and wkpl_flo_id != null and wkpl_flo_id != ""'>
		   and wkpl_loc_id = #{wkpl_flo_id}
		   </if>
		   <if test='wkpl_id != null and wkpl_id != "" and wkpl_bud_id != null and wkpl_bud_id != "" and (wkpl_flo_id == null or wkpl_flo_id == "")'>
		   and (wkpl_loc_id = #{wkpl_bud_id} or upp_wkpl_loc_id = #{wkpl_bud_id})
		   </if>
		   <if test='wkpl_id != null and wkpl_id != "" and (wkpl_bud_id == null or wkpl_bud_id == "") and (wkpl_flo_id == null or wkpl_flo_id == "")'>
		   and wkpl_id = #{wkpl_id}
		   </if>
		   <if test='upp_incl_wkpl_loc_nm != null and upp_incl_wkpl_loc_nm != ""'>
		   and upp_incl_wkpl_loc_nm like concat('%', rtrim(ltrim(#{upp_incl_wkpl_loc_nm})), '%')
		   </if>
		 order by path
	</select>
	
	<!-- 지역도 목록 저장 -->
    <insert id="insertRgnmgntList" parameterType="sqlMap">
        /* insertRgnmgntList */
        insert into tb_sh_wkpl_loc (
				wkpl_id 
			   ,wkpl_loc_id 
			   ,wkpl_loc_nm 
			   ,upp_incl_wkpl_loc_nm 
			   ,upp_wkpl_loc_id 
			   ,sort_sn 
			   ,usg_yn 
			   ,crt_usr_id 
			   ,crt_dt 
			   ,upt_usr_id 
			   ,upt_dt
			) values (
				#{wkpl_id}
			   ,#{wkpl_loc_id}
			   ,#{wkpl_loc_nm}
			   ,#{upp_incl_wkpl_loc_nm}
			   ,#{upp_wkpl_loc_id}
			   ,#{sort_sn}::numeric
			   ,#{usg_yn}
			   ,#{crt_usr_id}
			   ,now()
			   ,#{upt_usr_id}
			   ,now()
			)
    </insert>
    
    <!-- 지역도 목록 업데이트 -->
    <update id="updateRgnmgntList" parameterType="sqlMap">
        /* updateRgnmgntList */
        update tb_sh_wkpl_loc
		   set wkpl_loc_nm = #{wkpl_loc_nm}
			  ,upp_incl_wkpl_loc_nm = #{upp_incl_wkpl_loc_nm}
			  ,upp_wkpl_loc_id = #{upp_wkpl_loc_id}
			  ,sort_sn = #{sort_sn}::numeric
			  ,usg_yn = #{usg_yn}
			  ,upt_usr_id = #{upt_usr_id}
			  ,upt_dt = now()
		 where wkpl_id = #{wkpl_id}
		   and wkpl_loc_id = #{wkpl_loc_id}
    </update>
    
    <select id="selectRgnmgntBKey" parameterType="sqlMap" resultType="string" useCache="false">
		/* selectRgnmgntBKey  */
		select concat('LOC_', #{wkpl_id}, '_B', coalesce(lpad((max(substring(wkpl_loc_id , length(#{wkpl_id}) + 7, 3)::integer) + 1)::text, 3, '0'),'001')) as key
		  from tb_sh_wkpl_loc
		 where 1=1
		   and wkpl_id = #{wkpl_id}
	</select>
	
	<select id="selectRgnmgntFKey" parameterType="sqlMap" resultType="string" useCache="false">
		/* selectRgnmgntFKey  */
		select concat(#{upp_wkpl_loc_id}, '_F', coalesce(lpad((max(substring(wkpl_loc_id , length(#{wkpl_id}) + 12, 3)::integer) + 1)::text, 3, '0'),'001')) as key
		  from tb_sh_wkpl_loc
		 where 1=1
		   and wkpl_id = #{wkpl_id}
		   and upp_wkpl_loc_id = #{upp_wkpl_loc_id} 
	</select>
	
	<!-- 사업장 그룹 매핑 데이터 조회  -->
	<select id="selectCatMapgtList" parameterType="sqlMap" resultType="sqlMap">
		/* selectCatMapgtList  */
		select *
		  from tb_sh_wkpl_cat_mapg
	     where del_yn = 'N'
	       and wkpl_id = #{wkpl_id}
	</select>

	<select id="selectRgnmgntLoc" parameterType="sqlMap" resultType="sqlMap">
		select wkpl_id
			  ,wkpl_loc_id
			  ,point_reg_sn
			  ,point_cd
			  ,fn_get_cd('CO00000037', point_cd, 'B1', 'KO') as buf_1st_cntn
			  ,xcdnt
			  ,ycdnt
		  from tb_sh_wkpl_loc_point
		 where wkpl_id = #{wkpl_id}
		   and wkpl_loc_id = #{wkpl_loc_id}
	</select>

	<update id="updateRgnmgntLoc" parameterType="sqlMap">
		update tb_sh_wkpl_loc
		   set wkpl_loc_atfl_no = #{atfl_no}::INTEGER
		 where wkpl_id = #{wkpl_id}
		   and wkpl_loc_id = #{wkpl_loc_id}
	</update>

	<delete id="deleteRgnmgntLoc" parameterType="sqlMap">
		delete
		  from tb_sh_wkpl_loc_point
		 where wkpl_id = #{wkpl_id}
		   and wkpl_loc_id = #{wkpl_loc_id}
	</delete>

	<insert id="insertRgnmgntLoc" parameterType="sqlMap">
		insert into tb_sh_wkpl_loc_point (
										 wkpl_id
										,wkpl_loc_id
										,point_reg_sn
										,point_cd
										,xcdnt
										,ycdnt
										,crt_usr_id
										,crt_dt
										,upt_usr_id
										,upt_dt
										  )
								  values (
										 #{wkpl_id}
										,#{wkpl_loc_id}
									    ,#{point_reg_sn}
										,#{point_cd}
										,substring(#{xcdnt}, 1, 4)
										,substring(#{ycdnt}, 1, 4)
										,#{crt_usr_id}
	    								,now()
	    								,#{upt_usr_id}
	    								,now()
										  )
	</insert>
</mapper>