<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kist.portal.common.chems.mapper.ApiMapper">

	<!-- 
		ApiDto 반환모델을 위한 resultMap
		author miri
		version 2023-05-31
	 -->
	<resultMap id="apiMap" type="com.kist.portal.common.comm.dto.ApiDto">
    	<!-- ==== [start API테이블] -->
		<result property="apiNo" column="api_no" />
		<result property="businessCode" column="biz_cd" />
		<result property="businessCodeName" column="biz_cd_nm" />
		<result property="detailBusinessCode" column="dtl_biz_cd" />
		<result property="detailBusinessCodeName" column="dtl_biz_cd_nm" />
		<result property="apiExplain" column="api_expl" />
		<result property="apiUrl" column="api_url" />
		<result property="usageYn" column="usg_yn" />
		<result property="deleteYn" column="del_yn" />
		<result property="createUserId" column="crt_usr_id" />
		<result property="createDateTime" column="crt_dt" />
		<result property="updateUserId" column="upt_usr_id" />
		<result property="updateDateTime" column="upt_dt" />
		<result property="privacyYn" column="privacy_yn" />
		<result property="privacyText" column="privacy_txt" />
    	<!-- ==== [end API테이블] -->
	    <!-- ==== [start API-권한 매핑 서브테이블] -->
		<result property="getMethodYn" column="gemthd_yn" />
		<result property="postMethodYn" column="pomthd_yn" />
		<result property="putMethodYn" column="pumthd_yn" />
		<result property="deleteMethodYn" column="demthd_yn" />
	    <!-- ==== [end API-권한 매핑 서브테이블] -->

	</resultMap>


	<select id="selectApiList" parameterType="sqlMap" resultType="sqlMap">
		/* selectApiList */
		select (ROW_NUMBER() OVER()) AS no
		      ,a.api_no
		      ,a.biz_cd
		      ,a.dtl_biz_cd
		      ,a.api_url
		      ,a.api_expl
		from (
			select 
				  api_no
				  ,biz_cd
				  ,dtl_biz_cd
				  ,api_url
				  ,api_expl
			from tb_co_api
			where 1=1
			<if test='biz_cd != null and biz_cd != ""'>
			  and biz_cd = #{biz_cd}
			</if>
			<if test='dtl_biz_cd != null and dtl_biz_cd != ""'>
			  and dtl_biz_cd = #{dtl_biz_cd}
			</if>
			<if test='api_url != null and api_url != ""'>
			  and api_url like concat('%', trim(BOTH FROM #{api_url}::text), '%')
			</if>
			  and usg_yn = 'Y'
			  and del_yn = 'N'
			order by api_no asc
		) a
	</select>
	
	<select id="selectApiRoleList" parameterType="sqlMap" resultType="sqlMap">
		/* selectApiRoleList */
		select tcr.role_no
			  ,tcm.mlang_cntn as roleNm
			  ,case when tcr.role_no in (
			  	select tcr2.role_no 
			  	from tb_co_role tcr2 join tb_co_api_role tca
			  	on tcr2.role_no = tca.role_no
			  	where api_no = #{api_no}::text
			  	and tca.usg_yn = 'Y'
			  	and tcr2.usg_yn = 'Y'
			  	and tca.gemthd_yn = 'Y'
			  ) then 'Y'
			  else 'N' end as gemthd_yn
			  ,case when tcr.role_no in (
			  	select tcr2.role_no 
			  	from tb_co_role tcr2 join tb_co_api_role tca
			  	on tcr2.role_no = tca.role_no
			  	where api_no = #{api_no}::text
			  	and tca.usg_yn = 'Y'
			  	and tcr2.usg_yn = 'Y'
			  	and tca.pomthd_yn = 'Y'
			  ) then 'Y'
			  else 'N' end as pomthd_yn
			  ,case when tcr.role_no in (
			  	select tcr2.role_no 
			  	from tb_co_role tcr2 join tb_co_api_role tca
			  	on tcr2.role_no = tca.role_no
			  	where api_no = #{api_no}::text
			  	and tca.usg_yn = 'Y'
			  	and tcr2.usg_yn = 'Y'
			  	and tca.pumthd_yn = 'Y'
			  ) then 'Y'
			  else 'N' end as pumthd_yn
			  ,case when tcr.role_no in (
			  	select tcr2.role_no 
			  	from tb_co_role tcr2 join tb_co_api_role tca
			  	on tcr2.role_no = tca.role_no
			  	where api_no = #{api_no}::text
			  	and tca.usg_yn = 'Y'
			  	and tcr2.usg_yn = 'Y'
			  	and tca.demthd_yn = 'Y'
			  ) then 'Y'
			  else 'N' end as demthd_yn
		from tb_co_role tcr 
		join tb_co_mlang tcm on tcr.role_no = tcm.role_no 
		and tcm.usg_yn = 'Y' 
		and tcr.usg_yn = 'Y'
		where tcm.lang_cd = #{SESS_LANG}
	</select>
	
	<select id="selectApiKey" parameterType="sqlMap" resultType="string">
		/* selectApiKey */
		select
			concat('API', lpad((max(substring(api_no, 4, 6)::integer) + 1)::text, 6, '0')) as key 
		from tb_co_api
	</select>
	
	<insert id="insertApiList" parameterType="sqlMap">
       insert into tb_co_api (
        	 api_no 
        	,biz_cd
        	,dtl_biz_cd 
        	,api_url
        	,api_expl 
        	,crt_usr_id 
        	,crt_dt 
        	,upt_usr_id 
        	,upt_dt 
		) values (
			 #{api_no}
			,#{biz_cd}
			,#{dtl_biz_cd}
			,trim(BOTH FROM #{api_url}::text)
			,trim(BOTH FROM #{api_expl}::text)
			,#{username}
			,to_char(now(), 'YYYYMMDDHH24MISS')
			,#{username}
			,to_char(now(), 'YYYYMMDDHH24MISS')
		)
    </insert>
    
    <update id="updateApiList" parameterType="sqlMap">
        /* updateApiList */
        update tb_co_api set
        	 biz_cd = #{biz_cd}
        	,dtl_biz_cd = #{dtl_biz_cd}
        	,api_url = trim(BOTH FROM #{api_url})
        	,api_expl = trim(BOTH FROM #{api_expl})
        	,upt_usr_id = #{username}
        	,upt_dt = to_char(now(), 'YYYYMMDDHH24MISS')
        where api_no = #{api_no}
    </update>
    
    <update id="deleteApiList" parameterType="sqlMap">
        /* deleteApiList */
        update tb_co_api set
        	 usg_yn = 'N'
        	,del_yn = 'Y'
        	,upt_usr_id = #{username}
        	,upt_dt = to_char(now(), 'YYYYMMDDHH24MISS')
        where api_no = #{api_no}
    </update>
    
    <update id="deleteApiRole" parameterType="sqlMap">
        /* deleteApiRole */
        update tb_co_api_role set
        	 usg_yn = 'N'
        	,del_yn = 'Y'
        	,upt_usr_id = #{username}
        	,upt_dt = to_char(now(), 'YYYYMMDDHH24MISS')
        where api_no = #{api_no}
    </update>

	<insert id="insertApiRole" parameterType="sqlMap">
       insert into tb_co_api_role (
        	 api_no
        	,role_no 
        	,gemthd_yn
        	,pomthd_yn
        	,pumthd_yn
        	,demthd_yn
        	,crt_usr_id 
        	,crt_dt 
        	,upt_usr_id 
        	,upt_dt 
		) values (
			 #{api_no}
			,#{role_no}
			,#{gemthd_yn}
			,#{pomthd_yn}
			,#{pumthd_yn}
			,#{demthd_yn}
			,#{username}
			,to_char(now(), 'YYYYMMDDHH24MISS')
			,#{username}
			,to_char(now(), 'YYYYMMDDHH24MISS')
		) on conflict (api_no, role_no)
		do update set gemthd_yn = #{gemthd_yn}
		       ,pomthd_yn = #{pomthd_yn}
		       ,pumthd_yn = #{pumthd_yn}
		       ,demthd_yn = #{demthd_yn}
			   ,usg_yn = 'Y'
			   ,del_yn = 'N'
			   ,upt_usr_id = #{username}
			   ,upt_dt = to_char(now(), 'YYYYMMDDHH24MISS') 
		where tb_co_api_role.api_no = #{api_no} 
		  and tb_co_api_role.role_no = #{role_no}
    </insert>
    
    <insert id="updateApiRole" parameterType="sqlMap">
       insert into tb_co_api_role (
        	 api_no 
        	,role_no 
        	,usg_yn 
        	,del_yn 
        	,crt_usr_id 
        	,crt_dt 
        	,upt_usr_id 
        	,upt_dt 
		) values (
			 #{api_no}
			,#{roleNo}
			,'N'
			,'N'
			,#{username}
			,to_char(now(), 'YYYYMMDDHH24MISS')
			,#{username}
			,to_char(now(), 'YYYYMMDDHH24MISS')
		) on conflict (api_no, role_no)
		do update set usg_yn = 'N'
			   ,del_yn = 'N'
			   ,upt_usr_id = #{username}
			   ,upt_dt = to_char(now(), 'YYYYMMDDHH24MISS') 
		where tb_co_api_role.api_no = #{api_no} 
		  and tb_co_api_role.role_no = #{roleNo}
    </insert>
</mapper>