<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kist.portal.common.chems.mapper.MenuMapper">

	<select id="selectMenuList" parameterType="sqlMap" resultType="sqlMap">
		/* selectMenuList */
		with recursive apchems_menu 
		 (menu_no
		 ,up_menu_no
		 ,mlang_cntn
		 ,mlang_abbr
		 ,menu_url
		 ,usg_yn
		 ,del_yn
		 ,level
		 ,path
		 ,cycle
		 ,addbtn
		 ,sort_seq
		 ) as
		(select tcm.menu_no::text as menu_no
		       ,tcm.up_menu_no 
		       ,tcm2.mlang_cntn 
		       ,tcm2.mlang_abbr
		       ,tcm.menu_url
		       ,tcm.usg_yn 
		       ,tcm.del_yn
		       ,0
		       ,array[concat(lpad(tcm.sort_seq::text,4,'0'), '/', tcm.menu_no)]
		       ,false
		       ,fn_get_mlang('LB00000047', #{session.languageCode})
		       ,tcm.sort_seq
		   from tb_co_menu tcm
		   join tb_co_mlang tcm2 on tcm.menu_no = tcm2.menu_no and tcm2.lang_cd = #{session.languageCode}
		  where tcm.up_menu_no = ''
		  union all
		 select tcm.menu_no
		       ,tcm.up_menu_no
		       ,tcm2.mlang_cntn
		       ,tcm2.mlang_abbr
		       ,tcm.menu_url
		       ,tcm.usg_yn 
		       ,tcm.del_yn
		       ,am.level + 1
		       ,array_append(am.path, concat(lpad(tcm.sort_seq::text,4,'0'), '/', tcm.menu_no))
		       ,tcm.menu_no = ANY(am.path)
		       ,case when am.level <![CDATA[<]]> 1 then fn_get_mlang('LB00000047', 'KO') else '' end
		       ,tcm.sort_seq
		   from tb_co_menu tcm
		   join tb_co_mlang tcm2 on tcm.menu_no = tcm2.menu_no and tcm2.lang_cd = #{session.languageCode}
		   join apchems_menu am on tcm.up_menu_no = am.menu_no
		  where not cycle
		)
		select menu_no
		      ,up_menu_no
		      ,mlang_cntn
		      ,mlang_abbr
		      ,trim(BOTH FROM menu_url::text) as menu_url
		      ,usg_yn
		      ,del_yn
		      ,level+1 as level
		      ,path
		      ,addbtn
		      ,sort_seq
		 from apchems_menu
		 where del_yn = 'N'
		 order by path
	</select>
	
	<select id="selectMenuRoleList" parameterType="sqlMap" resultType="sqlMap">
		/* selectMenuRoleList */
		select tcr.role_no
			  ,tcm.mlang_cntn as roleNm
			  ,case when tcr.role_no in (
			  	select tcr2.role_no 
			  	from tb_co_role tcr2 join tb_co_menu_role tcmr 
			  	on tcr2.role_no = tcmr.role_no 
			  	where menu_no = #{menu_no}::text
			  	and tcmr.usg_yn = 'Y'
			  	and tcr2.usg_yn = 'Y'
			  ) then 1
			  else 0 end as roleChk
		from tb_co_role tcr 
		join tb_co_mlang tcm on tcr.role_no = tcm.role_no 
		and tcm.usg_yn = 'Y' 
		and tcm.del_yn = 'N'
		and tcr.usg_yn = 'Y'
		and tcr.del_yn = 'N'
		where tcm.lang_cd = #{session.languageCode}
	</select>
	
	<insert id="insertMenuRole" parameterType="sqlMap">
       insert into tb_co_menu_role (
        	 menu_no 
        	,role_no 
        	,usg_yn 
        	,del_yn 
        	,crt_usr_id 
        	,crt_dt 
        	,upt_usr_id 
        	,upt_dt 
		) values (
			 #{menuNo}
			,#{roleNo}
			,'Y'
			,'N'
			,#{session.userId}
			,to_char(now(), 'YYYYMMDDHH24MISS')
			,#{session.userId}
			,to_char(now(), 'YYYYMMDDHH24MISS')
		) on conflict (menu_no, role_no)
		do update set usg_yn = 'Y'
			   ,del_yn = 'N'
			   ,upt_usr_id = #{session.userId}
			   ,upt_dt = to_char(now(), 'YYYYMMDDHH24MISS') 
		where tb_co_menu_role.menu_no = #{menuNo} 
		  and tb_co_menu_role.role_no = #{roleNo}
    </insert>
    
    <insert id="updateMenuRole" parameterType="sqlMap">
       insert into tb_co_menu_role (
        	 menu_no 
        	,role_no 
        	,usg_yn 
        	,del_yn 
        	,crt_usr_id 
        	,crt_dt 
        	,upt_usr_id 
        	,upt_dt 
		) values (
			 #{menuNo}
			,#{roleNo}
			,'N'
			,'N'
			,#{session.userId}
			,to_char(now(), 'YYYYMMDDHH24MISS')
			,#{session.userId}
			,to_char(now(), 'YYYYMMDDHH24MISS')
		) on conflict (menu_no, role_no)
		do update set usg_yn = 'N'
			   ,upt_usr_id = #{session.userId}
			   ,upt_dt = to_char(now(), 'YYYYMMDDHH24MISS') 
		where tb_co_menu_role.menu_no = #{menuNo} 
		  and tb_co_menu_role.role_no = #{roleNo}
    </insert>
    
    <select id="selectMlangMenuKey" parameterType="sqlMap" resultType="string">
		/* selectMlangMenuKey */
		select
			case when key2 is null then key else key2 end as key
		from
			(
				select
					concat('MN', lpad((max(substring(mlang_no, 3, 8)::integer) + 1)::text, 8, '0')) as key 
					,(
						select max(tcm.mlang_no)
						from tb_co_mlang tcm
						where tcm.menu_no = #{menuNo}
					) as key2
				from tb_co_mlang
				where mlang_type_cd = 'MN' 
			) a
	</select>
	
	<insert id="insertMenu" parameterType="sqlMap">
       insert into tb_co_menu (
        	 menu_no 
        	,up_menu_no
        	,menu_url 
        	,sort_seq 
        	,usg_yn 
        	,del_yn 
        	,crt_usr_id 
        	,crt_dt 
        	,upt_usr_id 
        	,upt_dt 
		) values (
			 trim(BOTH FROM #{menuNo}::text)
			,#{upMenuNo}
			,trim(BOTH FROM #{menuUrl}::text)
			,#{sortSeq}::integer
			,#{useYn}
			,'N'
			,#{session.userId}
			,to_char(now(), 'YYYYMMDDHH24MISS')
			,#{session.userId}
			,to_char(now(), 'YYYYMMDDHH24MISS')
		) on conflict ( menu_no ) do update 
			set up_menu_no = #{upMenuNo}
			   ,menu_url = trim(BOTH FROM #{menuUrl}::text)
			   ,sort_seq = #{sortSeq}::integer
			   ,usg_yn = #{usgYn}
			   ,del_yn = 'N'
			   ,crt_usr_id = #{session.userId}
			   ,crt_dt = to_char(now(), 'YYYYMMDDHH24MISS')
			   ,upt_usr_id = #{session.userId}
			   ,upt_dt = to_char(now(), 'YYYYMMDDHH24MISS')
			where tb_co_menu.menu_no = #{menuNo}
    </insert>
    
    <insert id="insertMlangMenu" parameterType="sqlMap">
       insert into tb_co_mlang
		(
		             mlang_no 
		        	,lang_cd 
		        	,mlang_type_cd 
		        	,biz_cd
		        	,mlang_cntn
		        	,mlang_abbr 
		        	,role_no 
		        	,menu_no 
		        	,cd_grp_no 
		        	,cd 
		        	,usg_yn 
		        	,del_yn 
		        	,crt_usr_id 
					,crt_dt 
					,upt_usr_id 
					,upt_dt 
		) select * from (
				select a.mlang_no 
		        	,b.lang_cd 
		        	,a.mlang_type_cd 
		        	,a.biz_cd
		        	,case when b.lang_cd = #{session.languageCode} then a.mlang_cntn else a.mlang_cntn || '(' || b.lang_cd || ')' end as mlang_cntn
		        	,case when b.lang_cd = #{session.languageCode} then a.mlang_abbr else a.mlang_abbr || '(' || b.lang_cd || ')' end as mlang_abbr
		        	,a.role_no 
		        	,a.menu_no 
		        	,a.cd_grp_no 
		        	,a.cd 
		        	,a.usg_yn 
		        	,a.del_yn 
		        	,#{session.userId} as crt_usr_id 
					,to_char(now(), 'YYYYMMDDHH24MISS') as crt_dt 
					,#{session.userId} as upt_usr_id 
					,to_char(now(), 'YYYYMMDDHH24MISS') as upt_dt 
		        from 
		        	(
		        		select 
							 #{mlang_key} as mlang_no
							,'MN' as mlang_type_cd
							,'CH' as biz_cd
							,trim(BOTH FROM #{menuNm}::text) as mlang_cntn
							,trim(BOTH FROM #{menuNm}::text) as mlang_abbr
							,'ZZZZZZZZZZZZZZZZZZZZ' as role_no
							,trim(BOTH FROM #{menuNo}::text) as menu_no
							,'ZZZZZZZZZZZZZZZZZZZZ' as cd_grp_no
							,'ZZZZZZZZZZZZZZZZZZZZ' as cd
							,'Y' as usg_yn
							,'N' as del_yn
					) a
					,(
						select cd as lang_cd  
						from tb_co_cd cd 
						where cd.cd_grp_no = 'CO00000002'
					) b
		) so on conflict ( mlang_no, lang_cd ) do update 
				set mlang_cntn = excluded.mlang_cntn
				   ,usg_yn = 'Y'
				   ,del_yn = 'N'
			 	   ,crt_usr_id = #{session.userId}
			 	   ,crt_dt = to_char(now(), 'YYYYMMDDHH24MISS')
			 	   ,upt_usr_id = #{session.userId}
			 	   ,upt_dt = to_char(now(), 'YYYYMMDDHH24MISS')
    </insert>
    
    <update id="updateMenu" parameterType="sqlMap">
        /* updateMenu */
        update tb_co_menu set
        	 menu_url = trim(BOTH FROM #{menuUrl}::text)
        	,sort_seq = #{sortSeq}::integer
        	,usg_yn = #{useYn}
        	,upt_usr_id = #{session.userId}
        	,upt_dt = to_char(now(), 'YYYYMMDDHH24MISS')
        where menu_no = #{menuNo}
    </update>
    
    <update id="updateMlangMenu" parameterType="sqlMap">
        /* updateMlangMenu */
        update tb_co_mlang set
        	 mlang_cntn = trim(BOTH FROM #{menuNm}::text)
        	,upt_usr_id = #{session.userId}
        	,upt_dt = to_char(now(), 'YYYYMMDDHH24MISS')
        where menu_no = #{menuNo}
          and lang_cd = #{session.languageCode}
          and mlang_type_cd = 'MN'
    </update>
    
    <select id="selectMenuDetail" parameterType="sqlMap" resultType="sqlMap">
		/* selectMenuDetail */
		select 
			 menu_no
			,up_menu_no 
			,menu_url 
		from tb_co_menu
		where menu_no = #{menuNo}
		  and usg_yn = 'Y'
		  and del_yn = 'N'
	</select>
	
	<update id="deleteMenu" parameterType="sqlMap">
        /* deleteMenu */
        update tb_co_menu set
  			 del_yn = 'Y'
        	,usg_yn = 'N'
        	,upt_usr_id = #{session.userId}
        	,upt_dt = to_char(now(), 'YYYYMMDDHH24MISS')
        where menu_no = #{menuNo}
    </update>
    
    <update id="deleteMlangMenu" parameterType="sqlMap">
        /* deleteMlangMenu */
        update tb_co_mlang set
  			 del_yn = 'Y'
        	,usg_yn = 'N'
        	,upt_usr_id = #{session.userId}
        	,upt_dt = to_char(now(), 'YYYYMMDDHH24MISS')
        where menu_no = #{menuNo}
    </update>
    
    <update id="deleteMenuRole" parameterType="sqlMap">
        /* deleteMenuRole */
        update tb_co_menu_role set
  			 del_yn = 'Y'
        	,usg_yn = 'N'
        	,upt_usr_id = #{session.userId}
        	,upt_dt = to_char(now(), 'YYYYMMDDHH24MISS')
        where menu_no = #{menuNo}
    </update>
   
</mapper>