# 12장 커넥션 풀

웹어플리케이션서버 (톰캣)이
브라우저 하나 당 컨테이너 하나를 만들어서 구동을 시키는데
여러 브라우저를 상대한다면
부하가 발생한다 ( 다수의 커넥션 객체 생성)
이러한 해결방법이 커넥션 풀

dao에서 드라이버접근해서 커넥션객체를 생성할게 아니니 
이제 dao에서 드라이버,url은 필요없다

(톰캣 - conf 폴더 - context.xml 파일)
이클립스 프로젝트 탐색기 - servers 에 있는것과 같다(동기화됨)
워크스페이스에서 작업하면 톰캣에 주기적으로 업데이트됨.
이클립스에서 수정하자

<Resource
auth="Container"  // 컨테이너 정의
driverClassName = "oracle.jdbc.driver.OracleDriver"  // 드라이버경로
url = "jdbc:oracle:thin:@localhost:1521:xe"    //  url 경로
username = "scott"   // 아이디
password = "tiger"   // 비번
name = "jdbc/Oracle11g"   //  커넥션풀 이름
type = "javax.sql.DataSource"
maxActive = "10"   // 커넥션객체 확보 갯수
maxWait = "1000"   // 커넥션객체 생성시(확보갯수로도 부족할때) 1초이상 기다리지 않는다(maxWait 지나면 500에러)
/>
</Context> // 닫는태그 바로 위에 복붙하면된다.

근데 이게 톰캣파일에 주기적으로 옮겨진다고해도 그게 바로 적용되는지 모르니 직접 동기화를 시켜보겠다.
1. 톰켓서버가 꺼져있어야한다
2. 이클립스 하단 서버탭에 publish to the server 를 클릭한다
3. 그러면 아래 톰켓서버에 [Stopped, Synchronized] 동기화 됐다고 바뀐다. 끝

커넥션풀의 DataSource 안에 커넥션객체를 쌓아놓을텐데
위에서 적용햇던 커넥션풀 이름을 그대로 가져와서 

private Connection getConnection() throws SQLException {
	Connection conn = null;
	try {
		Context ctx = new InitialContext();
		DataSource ds = (DataSource)ctx.lookup("java:comp/env/jdbc/Oracle11g");
		conn = ds.getConnection();
	} catch (NamingException e) {
		System.out.println(e.getMessage());
	}
	return conn;
}


----------
## 회원인증 프로그래밍 예제

session 프로젝트에서 했었던 회원가입예제 리뉴얼
DB연동 커넥션풀이용 싱글톤DAO

낫널 안하고 널 들어갈수도있다는전제로 

아이디 잘못치면 메세지생성됐던거

로그인 완료시 헤더 바뀌는거

dao메소드 로그인성공여부는 2가지만 성공실패

--
- com.lec.customer 패키지
CustomerDto.java
CustomerDao.java (커넥션풀이용, 싱글톤)

footer.css
header.css
join.css

- webContent/customer
footer.jsp
header.jsp - session에 customer 속성이 있는지 여부로 헤더 표시가 바뀜
main.jsp
join.jsp
joinPro.jsp - 입력된 정보를 customer 테이블에 추가, 세션에 id속성추가(로그인페이지로 이동
login.jsp
loginPro.jsp - 세션에 customer 속성 추가
modify.jsp
modifyPro.jsp - db와 세션 수정
logout.jsp


css 제외하고 서블릿,jsp파일만 압축해서 보내기


private String cid;
private String cpw;
private String cname;
private String ctel;
private String cemail;
private String caddress;
private Date cbirth;
private String cgender;
private Date crdate;













