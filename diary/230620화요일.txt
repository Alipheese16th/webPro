
# call by value와 call by reference 차이

함수 호출 방식에는 "값에 의한 호출(call by value)"과 
"참조에 의한 호출(call by reference)" 두 가지가 있습니다.

1. Call by value(값에 의한 호출)

값에 의한 호출은 함수를 호출할 때 매개변수로 전달되는 인자의 값을 복사하여 함수 내부로 전달합니다. 
이렇게 복사된 값은 함수 내에서 사용되며, 함수 내에서 매개변수의 값이 변경되어도 원본 변수에는 영향을 주지 않습니다.

값에 의한 호출의 동작 과정은 다음과 같습니다:

- 호출하는 쪽에서 값을 전달하면, 함수의 매개변수는 해당 값을 복사하여 새로운 메모리 공간에 저장합니다.

- 함수 내부에서 매개변수의 값을 변경하면, 해당 복사된 값만 변경되며 원본 변수는 영향을 받지 않습니다.

- 함수가 반환되면, 함수 내에서 변경된 매개변수 값은 사라지고, 원본 변수의 값은 그대로 유지됩니다.

- 매개변수로 전달되는 값의 크기가 큰 경우, 값 복사에 따른 오버헤드가 발생할 수 있습니다.

2. Call by reference(참조에 의한 호출)

참조에 의한 호출은 함수를 호출할 때 매개변수로 전달되는 변수의 메모리 주소를 전달합니다. 
이렇게 전달된 메모리 주소를 통해 함수 내에서 변수를 참조하고 조작할 수 있습니다. 
따라서 함수 내에서 매개변수의 값을 변경하면 원본 변수에도 영향을 줍니다.

참조에 의한 호출의 동작 과정은 다음과 같습니다:

- 호출하는 쪽에서 변수를 전달하면, 함수의 매개변수는 해당 변수의 메모리 주소를 저장합니다.

- 함수 내에서 매개변수를 참조하여 값을 읽거나 변경하면 원본 변수에도 영향을 줍니다.

- 함수가 반환되어도, 매개변수는 원본 변수를 참조하고 있으므로 원본 변수의 값이 변경될 수 있습니다. 
즉 호출된 함수 내에서 매개변수를 다른 변수로 복사하지 않고 직접 사용하면, 원본 변수와 동일한 값을 참조하게 됩니다.

- 메모리 주소를 전달하기 때문에 값의 복사가 필요하지 않으므로 오버헤드가 적습니다.

3. 정리

참조에 의한 호출은 원본 변수를 직접 조작할 수 있으므로 변수에 대한 수정이 필요한 경우에 유용합니다.
또한, 큰 크기의 데이터를 전달할 때 값 복사로 인한 성능 저하를 피할 수 있습니다.
그러나 주의해야 할 점은 참조에 의한 호출은 변수의 메모리 주소를 전달하기 때문에, 전달된 인자가 반드시 변수여야 합니다.

마지막으로, 언어에 따라 호출 방식의 기본값이나 키워드가 다를 수 있으니 해당 언어의 문서나 규칙을 확인하여 사용하는게 바람직하고,
각각 어느게 더 좋다 나쁘다기보다는 쓰임새가 다르니 적절한 상황에서 맞게 사용하는게 중요하다고 생각합니다.



-----------
----------
--------------
-----------






자바에서도 역시 call by value 와 call by reference 동작 차이가 존재합니다. 
단 정확하게 보자면 자바에는 call by reference가 존재하지 않습니다.
왜냐하면 C언어와 달리 자바에서는 포인터를 철저하게 숨겨 개발자가 직접 메모리 주소에 접근 하지 못하게 조치했기 때문이다.
( C언어는 포인터를 통해 그대로 주소를 통해 메모리를 참조할 수 있다 ) 
결론적으로 말하면, 자바에서의 파라미터는 call by value로서만 동작되며, 원시값이 복사 되느냐 주소값이 복사되느냐 차이가 있을뿐이다.
그리고 매개변수에 복사된 값에 따라, 원시값이면 바로 연산을하고 주소값이면 해당 메모리 주소를 참조해 값을 가져와 연산할 뿐이다.

C언어는 포인터를 이용해 주소값을 직접 가져와 전달할 수 있다.
이 말은 주소값을 몰래 변조하여 다른 소스 파일에서 이용되는 주소값을 가져올 수 있다는 말이며, 이를 악용하면 핵(hack)과 같은 불법 변질 프로그램이 될 수 있다.
반면 Java에서는 이러한 부분을 철저하게 봉쇄하였다.
사실 자바도 포인터로 메모리가 참조되지만 자바는 포인터를 철저하게 숨겨 개발자가 포인터를 이용하지 못하도록 막아 버린 것이다.
그래서 주소값을 복사를 통해 이용이 가능할뿐 직접 엑세스해서 만지작 거릴수는 없는 것이다.

이처럼 자바는 오로지 call by value 로서 동작한다.
그래도 원시값을 복사하느냐, 주소값은 복사하느냐에 따라 반환 결과가 달라지기 때문에 
세간에서는 이 둘을 구분하기 위해 call by value / call by address 로 명명 지어 구분하기도 합니다
(어차피 똑같은 value 복사지만 굳이 구분하자면 🤔)

다만 외부적인 관점에서 보면 주소값이 복사되든, 포인터를 이용해 참조하든, 메모리 안에 있는 데이터를 참조해 연산하는 동작 자체는 같기 때문에,
솔직하게 말하면 자바가 call by reference가 아니고 call by address 라 그러지만 사용하는 입장에서는 둘은 차이가 없다고 보면 된다고 생각합니다.


-----



업체 목록은 무조건 풀조회 시키고

국가는 해당 업체코드의 리스트만 조회

업체목록 중 하나 클릭시 -> 국가리스트 조회

도시는 해당 업체코드, 국가코드의 리스트만 조회

국가목록 중 하나 클릭시 -> 도시리스트 조회
















