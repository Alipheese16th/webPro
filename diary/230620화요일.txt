# call by value와 call by reference 차이

함수 호출 방식에는 "값에 의한 호출(call by value)"과 "참조에 의한 호출(call by reference)" 두 가지가 있습니다.

1. Call by value(값에 의한 호출)

값에 의한 호출은 함수를 호출할 때 매개변수로 전달되는 인자의 값을 복사하여 함수 내부로 전달합니다. 이렇게 복사된 값은 함수 내에서 사용되며, 함수 내에서 매개변수의 값이 변경되어도 원본 변수에는 영향을 주지 않습니다.

값에 의한 호출의 동작 과정은 다음과 같습니다:

- 호출하는 쪽에서 값을 전달하면, 함수의 매개변수는 해당 값을 복사하여 새로운 메모리 공간에 저장합니다.

- 함수 내부에서 매개변수의 값을 변경하면, 해당 복사된 값만 변경되며 원본 변수는 영향을 받지 않습니다.

- 함수가 반환되면, 함수 내에서 변경된 매개변수 값은 사라지고, 원본 변수의 값은 그대로 유지됩니다.

- 매개변수로 전달되는 값의 크기가 큰 경우, 값 복사에 따른 오버헤드가 발생할 수 있습니다.



2. Call by reference(참조에 의한 호출)

참조에 의한 호출은 함수를 호출할 때 매개변수로 전달되는 변수의 메모리 주소를 전달합니다. 이렇게 전달된 메모리 주소를 통해 함수 내에서 변수를 참조하고 조작할 수 있습니다. 따라서 함수 내에서 매개변수의 값을 변경하면 원본 변수에도 영향을 줍니다.

참조에 의한 호출의 동작 과정은 다음과 같습니다:

- 호출하는 쪽에서 변수를 전달하면, 함수의 매개변수는 해당 변수의 메모리 주소를 저장합니다.

- 함수 내에서 매개변수를 참조하여 값을 읽거나 변경할 수 있습니다. 또한 함수 내에서 매개변수의 값을 변경하면 원본 변수에도 영향을 줍니다.

- 함수가 반환되어도, 매개변수는 원본 변수를 참조하고 있으므로 원본 변수의 값이 변경될 수 있습니다. 즉 호출된 함수 내에서 매개변수를 다른 변수로 복사하지 않고 직접 사용하면, 원본 변수와 동일한 값을 참조하게 됩니다.

- 메모리 주소를 전달하기 때문에 값의 복사가 필요하지 않으므로 오버헤드가 적습니다.



참조에 의한 호출은 원본 변수를 직접 조작할 수 있으므로 변수에 대한 수정이 필요한 경우에 유용합니다. 또한, 큰 크기의 데이터를 전달할 때 값 복사로 인한 성능 저하를 피할 수 있습니다. 그러나 주의해야 할 점은 참조에 의한 호출은 변수의 메모리 주소를 전달하기 때문에, 전달된 인자가 반드시 변수여야 합니다.

마지막으로, 언어에 따라 호출 방식의 기본값이나 키워드가 다를 수 있으니 해당 언어의 문서나 규칙을 확인하여 사용하는게 바람직하고,
각각 어느게 더 좋다 나쁘다기보다는 쓰임새가 다르니 적절한 상황에서 맞게 사용하는게 중요하다고 생각합니다.












---


3. JVM 메모리에 변수가 저장되는 위치

Java 의 Call by Value 에 대해 이해하기 위해선 먼저 변수 생성 시 메모리에 어떤 식으로 저장되는 지 알아야 합니다.

Java 에서 변수를 선언하면 Stack 영역에 할당됩니다.

원시 타입 (Primitive Type) 은 Stack 영역에 변수와 함께 저장되며

참조 타입 (Reference Type) 객체는 Heap 영역에 저장되고 Stack 영역에 있는 변수가 객체의 주소값을 갖고 있습니다.

https://raw.githubusercontent.com/ParkJiwoon/PrivateStudy/master/java/images/screen_2022_01_30_20_51_33.png
그림으로 표현하면 이렇습니다.



















