rest api는 정보를 주고 받는데 있어서 개발자들이 정한 일종의 형식

# interface
무언가 제품을 만든다면 당연히 기능들을 사용할수 있어야하니
티비에 리모컨, 자판기에 버튼이 필요하듯 인터페이스를 통해 제품을 다룬다
기계와 인간 간의 소통창구

사용자가 정보를 입력하는 것뿐만 아니라 응답 정보를 받는것
tv의 스크린, 컴퓨터의 모니터 또한 인터페이스에 속한다

소프트웨어로 들어가보자. 브라우저 창 등 유저가 소프트웨어에 접근하여 사용하는 것. 응답화면을 볼수 있는것.
# UI  유터 인터페이스
인간과 소프트웨어의 소통이 가능한 장치

기계와 기계, 소프트웨어와 소프트웨어 끼리도 정보를 통신해야하는경우도 많다. 예를들어 기상청 서버는 기상과 관련된 정보를 다루고 있다.
날씨관련 웹사이트에서는 이 기상청 서버에서 날씨정보를 요청해서 받아갸아함.
이처럼 소프트웨어가 다른 소프트웨어로부터
지정된 형식으로 요청, 명령을 받을 수 있는 수단을
Application Programming Interface
# API 라고 한다
로컬 프로그램인 브라우저는 Web API 를 통해 자바스크립트로부터 특정 동작들을 지시받기도 한다

그럼 그중에서 rest api는 뭐냐
# REST API
프론트엔드 웹에서 서버에 데이터를 요청하거나 하는 서비스에서 널리 사용되는것이 과거의 soap이란 복잡한 형식을 대체한 레스트 api 이다
rest의 가장 중요한 특성은 각 요청이 어떤 동작이나 정보를 위한 것인지를 그 요청의 모습 자체로 추론이 가능하다는 것이다
사실 그냥 기능만 생각하면 동작만 하게 만들면 그만이다
주소/1 이라고 요청하면 학생 리스트
주소/2 이라고 요청하면 선생님 리스트 를 응답하게 만들고 정상적으로 기능이 돌아가면 서비스는 문제가 없다. 단 프로젝트는 혼자하는것이 아니다.
Restful 하게 만들어진 API 는 주소만 가지고도 이게 뭘 하는 요청인지 대략 파악이 가능하다
자원을 구조와 함께 나타내는 이런 형태의 구분자를 URI 라고 한다
서버에 rest api 로 요청을 보낼때는 http 프로토콜로 요청을 하는데 
http 메서드는 get,post,delete,put,patch 등을 사용한다
소포가 편지보다 더 많은걸 담을수 있듯이 
post, put, patch 는 body 라는 주머니가 있어서 정보들을 get이나 delete보다 많이, 그리고 비교적 안전하게 감춰서 보낼수 있다
사실 post만 가지고도 대부분의 일을 할수는 있다
하지만 누구든 각 요청의 의도를 쉽게 파악할 수 있도록 restful하게 api를 만들기 위해서는 이들을 목적에 따라 구분해서 사용한다
get은 데이터를 READ 하기 위해 사용한다
post는 CREATE 새로운정보를 추가하기 위해 사용한다
put또는 patch는 데이터의 변경 UPDATE를 사용한다
회사마다 케바케이긴한데 put은 정보를 통째로 바꿀때, patch는 정보중 일부를 특정방식으로 변경할때 사용한다
delete는 역시 DELETE 데이터 삭제처리



-----

html,css,js 기본적인것들 요약정리 해보고

정적, 동적 웹의 구분을 명확히 했다.
정적웹은 개발자가 짠 코드를 그대로 내놓는것.
동적웹은 매번 실행할때마다 데이터베이스에서 검색해서 내놓기때문에 내용이 달라질수 있는것.

mvc 웹프레임워크란
여러 개발자들이 만들어놓은 부품을 사용하는것인데
라이브러리와 프레임워크의 차이는
라이브러리는 문짝, 창문 같은 가져다 쓰는 부품들이라면
프레임워크는 건물의 전체적인 틀, 구조라서 프레임워크에 덧붙여서 건물을 짓는다고 생각하자.
mvc 웹 프레임워크로는 자바로는 스프링, 파이썬은 디장고가 있고, 루비는 레일, C#은 닷넷코어 등 유명한 웹프레임워크가 많다.
model, view, controller 방식으로 구성한 웹프레임워크로 프로젝트를 만드는게 효율적이다.
모델은 데이터를 전달할 매개체,
view는 사용자에게 보여지는 부분,
controller는 제어를 담당하여 모델의 데이터를 뷰에 연결시키는 일을 한다.

-----

# SPA 프론트엔드 프레임워크
오늘은 리액트,뷰,앵귤러와 같은 spa 프론트프레임워크에 대해 알아볼것이다
이것들이 왜 나왔나
우리는 그동안 mvc웹프레임워크를 사용하면서 쉽고 빠르게 웹을 개발하게되었다. 그러나 아쉬운점 2가지.
오래된 웹사이트같은 경우 좋아요 버튼 하나 누르면 모든 페이지가 깜빡 하면서 페이지를 전부 로딩해야하는 경우. 데이터 소모도 심하고 서버에 부하를 준다.
다행히 ajax 기술이 나온 이후로는 http 통신으로 데이터를 전송하고 결과를 받아와서 사이트의 이부분을 이렇게 변경하라고 자바스크립트로 명령을 줄수있게 됐다. 대신 일일히 프로그래밍 하는 불편이 있었다.
두번째 문제로는 모바일환경이 추가되면서 사이트 하나만 만들면 되는 예전과 달리 개발할 종류가 많아졌다.

사용자 컴퓨터에서 돌아가는 프론트엔드와 서버에서 돌아가는 백엔드로 분리하여
작업을 하여 보다 효율적으로 분업하는것이다.

마치 정적웹처럼 사용자 브라우저에 html,css,js 코드를 넘겨주면 브라우저에서 주어진 데이터따라 html 웹페이지를 렌더링한다. 기존에 동적 웹에서 서버가 하던 일을 사용자컴퓨터에서 브라우저가 해내는것이다.
spa는 서버에서 데이터를 받아와야 할때마다 요청을 보내서 반환된 데이터로 사이트 내용을 갱신한다
사이트에서 뭘 할때마다 새로 접속하지 않고 한번 로드된 화면에서 많은 기능을 사용할 수 있다.

-----

# 비동기 프로그래밍
https://www.youtube.com/watch?v=m0icCqHY39U
동기화 처리 - 순차적으로 처리한다. 첫번째 작업이 10초가 걸리면 10초동안 아무것도 하지못하고 기다리다가 두번째 작업을 들어간다
비동기화 처리 - 비순차적 동시다발적 (멀티쓰레드느낌)으로 작업을 처리
자바스크립트는 브라우저나 node.js에 포함되어있는 자바스크립트엔진으로 실행되는데
자바스크립트 함수전용 특급 쓰레드가 있다. 그러나 자바스크립트가 도는 환경에는 이 엔진 뿐 아니라
WEB API 라는 것이 함께 동작한다
여기에서는 타이머를 사용하는 작업을 하거나, AJAX로 http 요청을 보내거나, 파일에서 데이터를 읽어오는등 시간을 소요하는 작업을 처리한다
즉 이에 해당하는 태스크는 비동기 작업 (WEB API)로 처리되고 자바스크립트 특급 쓰레드로 넘어가게 된다.


실제로 비동기처리를 실무에서 적용하려고하면 코드가 많이 복잡해질수있다
콜백 지옥이라고 하는데
콜백함수안에 콜백함수가 있는 식으로 반복하면 가독성이 떨어지고 실수 위험도 커지고 유지보수가 힘들어진다. 디버깅 작업은 그야말로 지옥.
그래서 ES6에서는 프로미스라는 개념이 나왔다.
# Promise
비동기작업을 실행하는 함수가 프로미스 객체를 반환하는데
이런식으로 작성된 프로미스 반환 함수들을 사용하고
.then() 을 붙여서 체이닝 형식으로 작업을 처리하는것이다.
순차적으로 처리하기때문에 보기도 편하고 직관적이다.
단 프로미스는 polyfill 등의 라이브러리 없이는 익스플로러에서는 동작하지 않는다


자바스크립트 ES7 에는
# Async / Await 
이란 기능이 추가되었다
프로미스보다 한층 간결하고 직관적으로 사용할수 있다

비동기 작업을 수행할 함수 앞에 async 키워드를 붙여서 마치 동기 작업처럼 처리할수 있게 코드를 안에 작성할수 있다.
내용을 보면 프로미스 객체를 반환하는(데이터를 읽어오는) 함수를 let 변수로 저장해서 순차적으로 다음 프로미스객체를 반환해야 하는데
보통 이렇게 하면 데이터를 변수에 담기도 전에 프로미스 객체를 담아놓고 다음 코드가 실행되기 때문 (비동기) 에러가 난다.
여기서 await 키워드를 앞에 붙여주면 데이터를 변수에 담을때까지 기다리기때문에 마치 동기화 작업처럼 순차적으로 진행할수 있게 된다

-----












