

사용여부 디폴트값 Y로

save컨트롤러 하나로 insert,update,delete 처리가 가능


json stringfy   json parse 해서 자바스크립트 객체 복사 가능
json stringfy 로 객체값 쉽게 비교

유효성 검사 focus 이동

아이디 중복검사하는것도 list 검색하는 쿼리로 통일가능

삭제시
del_yn 컬럼을 Y로 설정하고 보내서
컨트롤러에서 확인후 조건문타서 가기

## computed 사용해서
1. 유저아이디인풋박스 리드온리 
isReadOnlyUserId 조건변수
2. 삭제버튼 v-show  조건변수

## 쿼리 정렬 딱 한줄에 맞춰서

lodash





------------

금요일 발표 주제

본인이 생각하는 기본적인 Validation 체크리스트
예) 등록 시 테이블의 해당 컬럼 Max Length Check 등

----------

# 챗지피티 답변
입력 데이터 유효성 검사: 사용자로부터 입력받은 데이터가 예상한 형식과 유형에 맞는지 확인합니다. 예를 들어, 숫자 필드에 문자가 입력되지 않았는지, 이메일 주소가 올바른 형식인지 등을 확인할 수 있습니다.

범위 확인: 입력 데이터가 허용된 범위 내에 있는지 확인합니다. 예를 들어, 날짜 필드가 현재 날짜보다 이전인지 확인하거나, 숫자 필드가 특정 범위 내에 있는지 확인할 수 있습니다.

필수 필드 검사: 필수로 입력되어야 하는 필드가 모두 입력되었는지 확인합니다. 예를 들어, 회원 가입 양식에서 이메일 주소나 비밀번호가 빠진 경우를 확인할 수 있습니다.

데이터 일관성 검사: 시스템의 여러 부분 또는 데이터베이스 테이블 간의 데이터 일관성을 검사합니다. 예를 들어, 주문을 처리할 때 재고 수량과 주문 수량이 일치하는지 확인하는 것입니다.
















-----------
유효성 검사란?
유효성 검사는 데이터가 서버 혹은 데이터베이스로 옮겨지기 전, 개발자가 만든 조건에 부합하는지 확인, 검증하는 작업을 말합니다.

예를 들어 우리가 쿠팡에 새롭게 가입을 한다고 생각해봅시다. 가입 절차를 진행하다보면 우리가 자주 목격했던 글귀들을 목격하게 될 겁니다? 
"이미 가입된 ID 입니다." 혹은 "비밀번호는 영문,숫자,특수문자가 혼합되어야 합니다" 등
사용자는 개발자가 원하는 조건에 맞게 데이터를 입력해야만 가입절차를 완료할 수가 있습니다. 
이러한 작업들이 유효성 검사라고 생각합니다.

유효성 검사는 클라이언트, 서버 모두 처리가 가능합니다. 
어느 쪽을 중점적으로 처리해야 하는지, 어떤 부분을 처리해야 하는지에 따라 
개발자는 서버 측을 사용하기도, 클라이언트 측을 쓰기도 하죠. 
유효성 검사에 대해 정해진 것은 없기 때문에 두가지 방식을 이야기 해보려합니다.

클라이언트 측
클라이언트에서 일반적으로 가장 많이 사용되는 유효성 검사는 자바스크립트를 활용한 것입니다.
사용자가 데이터에 입력할때 아이디 중복확인 버튼을 누르면 입력한 아이디가 중복인지 아닌지 ajax를 이용해서 db에 접근하여 확인한다든가
개발자가 원하는 형식으로 작성하지 않으면 저장이 안된다든가
이런 부분은 자바스크립트를 이용합니다

서버 측
서버의 경우에는 방식이 좀 더 다양합니다. 
선호하는 언어, 라이브러리에 따라 성능이나 방식은 다르기 마련입니다.
route 에서 처리하거나, model 내에서 처리할 수 도 있으며, 필요한 경우라면 controller 에서 설정할 수도 있습니다. 

어디에서 쓰는게 좋은가?
각 영역마다 장단점이 있습니다. 우선 처리 속도만 본다면 클라이언트가 압도적으로 빠를 수 밖에 없습니다.
사용자 컴퓨터에 이미 유효성 검사 정보가 내장되어 있기 때문에 데이터 형식이 올바르지 않으면 서버까지 갈 필요도 없이 즉각적으로 유저에게 에러 메세지를 전달 할 수가 있습니다.

하지만 서버만 할 수 있는 유효성 검사들도 있습니다. 
예를 들어 중복된 ID가 있는지 확인하기 위해서는 데이터 베이스 내의 가입된 ID 데이터를 탐색하는 작업을 진행해야 합니다. 
이러한 경우는 클라이언트 유효성 검사에 비해 다소 시간이 걸릴지라도 반드시 필요한 부분이기 때문에 서버에서 작업해야하죠.

정리하자면
서버에서 반드시 다루어야 하는 유효 검증이 있고, 클라이언트 측이 더욱 효과적인 유효 검증이 있습니다. 
일반적으로 필요한 형식 email, password 길이, 특수문자, 공백, 나이 제한 등 을 다루는 작업은 클라이언트 내에서도 가능하고, 
데이터 베이스를 의존해야 하는 작업들은 서버에서 다루는 것이 좋습니다.


단, 여기까지가 제가 그동안 해왔던 방법이고, 제가 조사하면서 알게 된것이 있습니다.
프론트엔드'만'으로 유효성 검사를 하는것은 위험합니다. 프론트의 검증 코드를 브라우저의 개발자 도구에서 값 변조로 회피할 수도 있습니다.
추가로 전송 전 데이터도 얼마든지 변조할수 있다고 합니다. 그래서 해결방법으로는 크게 2가지라고 생각합니다.
1. 프론트,백엔드 양쪽에 모두 검증코드를 작성한다
2. 백엔드에 검증코드를 작성후, 백엔드 결과에 따라 프론트는 메세지만 노출한다

그래서 결론적으로 유효성 검사를 만드는데 정해진 정답 따위는 없다고 생각합니다
그럼에도 이러한 양면적인 측면들을 동시해 고려하면서 작업을 진행하는 것이 효과적인 유효성 검사를 만드는 첫 걸음이라 생각합니다.
-----


엄홍석차장님이었는데 프리랜서로 전향하신
엄홍석 부장님










김태규과장님 질문리스트

db에서 유저키 셀렉트시 COALESCE 함수 사용 이유

db에서 회원첫등록시 usg_yn 쿼리 입력시 기본 'Y'인 이유 - 첫 등록시 y나 n을 고르는게 의미가 없는거같다

























