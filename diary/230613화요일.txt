
오늘 발표(인터페이스) 피드백

설명을 집중하다보면 다른생각이 날 수 있다 디테일을 너무 신경쓰지말자
평소 이야기하듯이 하면서 얼마나 잘 와닿을지
한번 놓치면 잠깐 다른 생각을 할 수 있기 때문에 집중력을 잊지 않기 위한 것이 고난도 스킬
임펙트를 주자!!

----------

김태규 과장님 코드 리뷰

시간날때 작성해주신 쿼리 구조 보기

vscode 터미널 종료 ctrl + C

---

사용자관리메뉴
사용자 id (like조건이 아니다) 소문자 대문자 구분없이 검색가능 
사용자명 앞뒤에 라이크조건이 붙어있고 대소문자 구분없음
사용자등록일 해당날짜포함된것만

등록버튼을 누르면 등록화면으로 넘어가고 탭이 남는다
사용자 아이디는 영문만 작성가능
등록을 마치면 상세보기,수정,삭제가 가능해진다. 이모든게 한페이지다

---
# 테스트 - 사용자 관리 페이지

## 검색조건 - 사용자ID, 사용자명, 사용여부, 사용자등록일(기간)
- 사용자ID는 대소문자 구분없이 검색
- 사용자명은 사용자명/사용자영문명을 전후 like 검색
- 사용자 등록일은 선택한 기간에 포함되는 것만 검색


## 버튼
- 초기화버튼 - 검색조건 초기화
- 검색버튼 - 검색조건에 해당하는 목록 조회
- 등록버튼 - 등록페이지로 이동

## 대상 테이블
tb_co_test_user_m - 사용자 기본
tb_co_test_user_dtl_l - 사용자상세내역

조회할 컬럼
사용자아이디
사용자명
사용자영문명
사용자등록일
사용여부

-------

5분스피치
수요일 오후2시 노드,뷰, 컴파일언어와 인터프리터언어
목요일 오후4시 프레임워크란, Git, svn 등 형상관리 툴 종류 및 특징

-------

https://hanamon.kr/nodejs-%EA%B0%9C%EB%85%90-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0/

Node.js 사용이유

Node.js를 사용하려면 먼저 JavaScript를 배워야한다.
Node.js는 JavaScript를 사용하기 위해  만들어진 것이기 때문이다.
JavaScript는 C/C++, Java 와 같은 프로그래밍 언어이다.
하지만 이름에서 알 수 있듯 JavaScript는 독립적인 언어가 아닌 스크립트 언어이다.
스크립트 언어는 특정한 프로그램 안에서 동작하는 프로그램이기 때문에 웹 브라우저 프로그램 안에서만 동작을 한다.
즉, 웹 브라우저(크롬, 사파리, 익스플로러, 파이어폭스 등)가 없으면 사용할 수 없는 프로그램이다.
여기서 Node.js가 나오는 이유가 된다.
즉, JavaScript 를 웹 브라우저에서 독립시킨 것으로 Node.js를 설치하게 되면 터미널프로그램(윈도우의 cmd, 맥의 terminal 등)에서 Node.js를 입력하여 브라우저 없이 바로 실행할 수 있다.
하지만 JavaScript에서 분리된 언어이기 때문에 문법은 같다.
이렇게 Node.js를 이용하여 웹 브라우저와 무관한 프로그램을 만들 수 있게 되었다.
중요한 것은 Node.js를 이용하여 서버를 만들 수 있다는 것이다.
중요한 이유는 이전까지 Server-Client 웹사이트를 만들 때 웹에서 표시되는 부분은 JavaScript 를 사용하여 만들어야만 했으며, 서버는 Reby, Java 등 다른 언어를 써서 만들었어야 했는데 마침내 한 가지 언어로 전체 웹 페이지를 만들 수 있게 된 것이다.


Node.js는 Chrome V8 JavaScript 엔진으로 빌드 된 JavaScript 런타임입니다.

런타임이란 특정 언어로 만든 프로그램을 실행할 수 있는 환경을 뜻한다.
따라서 노드는 자바스크립트 프로그램을 컴퓨터에서 실행할 수 있게 하는 자바스크립트 실행기이다.
특히 2008년 구글이 V8 엔진을 사용하여 크롬을 출시했고 V8 엔진은 다른 자바스크립트 엔진과 달리 매우 빨라 라이언 달(Ryan Dahl)은 2009년 V8 엔진 기반의 노드 프로젝트를 시작하며 세상에 나왔다.











---------------------------------------------------------------------------------------------------------------------------------------------

넥사크로 마이플랫폼
교원 차세대 프로젝트 코볼 
고도화? 기능을 올리는 업그레이드
차세대? 옛날문법을 os도 바꾸고 언어도 바꾸고 최신기술로 접목시키는것. 고도화보다 어렵다

몇먼스 월 얼마
대부분이 사람 인건비. 자재비가 거의없기때문에 다른 사업에 비해 액수는 적다. 자재비가 없기때문에 고부가가치
건설하고 똑같다 우리의 일의 태생이 건축에서 나왔다. 설계부터 마무리 테스트까지 건축하고 흡사하다. 



---------1. Node.js

노드를 이야기하기전에 자바스크립트를 먼저 말씀드리자면 자바스크립트는 브라우저에서만 작동되는 스크립트 언어였습니다. 예를들어 익스플로러, 크롬, 파이어폭스 등이 있죠.
그동안 자바스크립트는 느린속도 때문에 다른 분야에서 활용할 일이 없었지만 크롬의 V8 엔진의 빠른 속도때문에 이것을 활용해서 누군가가 이것저것 라이브러리를 추가해
노드를 만들었습니다.
노드는 말하자면 자바스크립트를 구동시킬수 있는 환경을 세팅한다고 생각합니다.

그럼 노드를 왜사용하는가?
자바스크립트는 아까 말씀드렸다시피 웹 브라우저에서만 실행 됐습니다. 브라우저가 없으면 사용할수 없는 프로그램이죠.
여기서 node js가 존재이유가 되죠.
자바스크립트를 웹브라우저에서 독립시킨 것으로 node js를 설치하게 되면 윈도우의 cmd창이라든가 터미널에서 node js를 입력하여 브라우저 없이 바로 실행할 수 있습니다.
자바스크립트 기반 언어이기 때문에 문법은 같습니다. 이미 대부분의 개발자는 필수적인 언어인 자바스크립트를 알고 있기때문에 접근성도 쉽죠.
이렇게 node js를 이용해 브라우저와 무관한 프로그램을 만들수 있게 되었습니다.

즉, 노드를 통해 다양한 자바스크립트 애플리케이션을 실행할 수 있으며, 서버를 실행하는 데 제일 많이 사용됩니다.

---------2. vue.js

뷰는 자바스크립트로 개발된 프론트엔드 프레임워크입니다.
화면에 보여지는 부분을 프론트엔드이라고 하는데 
이 프론트엔드 개발을 쉽게 하기 위한 프레임워크로서 리엑트,앵귤러와 함께 대중적인 오픈소스 자바스크립트 프레임워크입니다.

vue의 특징으로는 spa(싱글 페이지 어플리케이션)이라는 점을 들수있는데요 이것이 무엇이냐하면, 마치 하나의 페이지처럼 동작하는 것입니다.
흔히 웹사이트를 다니다보면 페이지를 전환할때 깜빡거리면서 넘어가죠. 그게 매번 이동하면서 페이지를 새로 불러오느라 그런것입니다. 
그러나 뷰는 처음에 구동하면 모든페이지를 전부 불어들여옵니다. 그리고 페이지를 이동했다고 생각하면 미리 로드되어있는 페이지를 보여주는것 뿐이죠.
화면전환이 부드럽고 빠른 반응성, 보기에도 편하죠. 또한 페이지마다 서버에 요청을 하는게 아니라서 서버 부하가 적습니다.
단점으로는 처음에 모든 페이지를 불러오느라 초기 구동 속도가 느릴수밖에 없습니다.

뷰의 장점으로는 
1 - 다른 프론트엔드 프레임워크에 비해 가장 배우기가 쉽습니다.
2 - 리엑트, 앵귤러에 비해 가볍고 성능이 빠릅니다.
3 - 두 프레임워크의 장점을 잘 조합했습니다. React(Virtual DOM), Angular(데이터 바인딩)
4 - 컴포넌트 기반 구조로서 레고 블록처럼 컴포넌트라는 조각 조각의 조합으로 뷰를 구성함으로서 코드 재사용, 유지보수가 쉽습니다. 
(@ 이 레고를 여기서도 쓰고 저기서도 쓰고, 이 레고는 마음에 안들면 빼버리고 다른 조각으로 채우고)

---------3. 컴파일언어와 인터프리터 언어

프로그래밍언어는 종류가 많죠. C언어, 자바, 파이썬 등등
그런데 이 프로그래밍 언어로 코드를 작성한다고 컴퓨터가 바로 이걸 보고 이해하지를 못합니다.
그래서 저희가 작성한 코드를 중간에 번역해주는 과정이 필요하죠. 여기서 두가지로 나뉩니다.

1. 컴파일 언어 
 
컴파일 언어는 내가 작성한 소스 코드 전체를 컴퓨터가 이해하는 기계어로 번역한 뒤, 이 번역된 코드를 한번에 실행하는 두 단계를 거쳐 진행됩니다.
즉 번역과 실행이 완전히 따로 이루어진다는 뜻이다. 번역은 컴파일러를 통해 수행되고, 대표적인 예시로는 C언어, C++ 등이 있습니다.

 * 특징 *
1. 컴파일은 오래 걸릴 수 있습니다.
 --- 힘겹게 만든 코드를 과장해서 1시간에 거쳐 컴파일을 했다고 가정해봅시다. 그런데 변수 이름에 오타가 나서 에러가 발생했다면? 1시간동안 다시 컴파일 해야합니다. ㅠ  
2. 하지만 이미 컴파일이 된 프로그램이라면? 굉장히 빠른 속도로 실행이 가능합니다.
 --- 이미 컴파일이 다 되어 있어서 실행만 하면 되기 때문에
3. 운영체제 (OS) 이식성이 낮습니다.
 --- OS마다 실행할 수 있는 기계어가 다른 경우가 있습니다. 윈도우.. 리눅스.. 맥os 등등
 그럼 다른 OS에서 내 실행 파일을 실행시키려면? 이미 만들어둔 실행 파일은 불행히도 실행되지 않습니다. 해당 OS에 맞는 컴파일러로 다시 컴파일 해줘야합니다.

2. 인터프리터 언어

인터프리터 언어는 소스 코드를 한 줄씩, 번역과 실행을 동시에 진행합니다. 번역은 인터프리터를 통해 수행되며, 대표적인 예시로는 Python, Ruby, R 등이 있습니다.

 * 특징 *
1. 줄 단위로 번역과 실행을 하기 때문에 실행이 느립니다.
 --- 실행을 할때마다 다시 다 번역하고 실행해야 해서...
2. 디버깅이 쉽습니다.
 --- 오류를 발견하면 해당 코드 밑으로는 번역 및 실행을 못하기 때문에 오류 발견이 쉽습니다.
3. 운영체제 이식성이 좋습니다.
 --- OS마다 호환되는 인터프리터만 준비되어 있다면 바로 실행이 가능합니다.

3. 그럼 둘다 애매한 경우는?

자바스크립트는 기본적으로는 인터프리터 언어였지만 위에서도 언급한 크롬의 V8엔진이 자바스크립트의 성능을 향상시켰습니다. 컴파일 과정을 추가한것이죠.
그래서 자바스크립트는 두개의 특징을 다가지고있습니다.





---------------------------------------------------------------------------------------------------------------------------------------------









1. 컴파일 언어?
Java는 다른 컴파일 언어들이 작동하듯이 컴파일러를 이용해 전체 코드를 한번에 번역한다. 
여기서 사용하는 컴파일러를 자바 컴파일러(Java Compiler)라고 하며, 
이 자바 컴파일러는 우리가 작성한 Java 코드를 자바 가상 머신(Java Virtual Machine, JVM)이 실행시킬 수 있는 자바 바이트 코드로 번역한다.
여기까지의 과정을 보면 Java는 당연하게도 컴파일 언어로 분류하고 싶어 진다.

2. 인터프리터 언어?
하지만 자바 바이트 코드는 자바 가상 머신(JVM)의 자바 인터프리터(Java Interpreter)를 이용해 한 줄씩 실행된다. 
조금 더 자세하게 말하자면, 자바 바이트 코드로 작성되어 있는 실행 프로그램을 자바 인터프리터가 한 줄씩 읽으면서 컴퓨터가 이해할 수 있는 2진 코드로 번역한 후 실행시킨다는 뜻이다. 
이 부분은 충분히 인터프리터 언어로 생각할 만한 것 같다.

그래서 Java는 하이브리드 언어라는 괴상한 이름으로 불린다. 
컴파일 언어와 인터프리터 언어를 혼합한 형태의 언어라는 의미인데, 처음에는 인터프리터 언어로써 사용되다가, 성능 향상을 위하여 컴파일 언어의 장점을 가져왔다고 한다.









