

# 객체 지향(Object oriented) 프로그래밍이란?

객체지향 프로그래밍은 소프트웨어 개발 방법론 중 하나로, 프로그램을 구성하는 개체(객체)들을 중심으로 설계하고 구현하는 접근 방식입니다.

우리가 실생활에서 쓰는 모든 것을 객체라 하며, 객체 지향 프로그래밍은 프로그램 구현에 필요한 객체를 파악하고 각각의 객체들의 역할이 무엇인지를 정의하여 객체들 간의 상호작용을 통해 프로그램을 만드는 것을 말합니다.

객체 지향 개념이 나오기 이전의 프로그래밍은 절차 지향 방식이었습니다.
프로그램을 기능중심으로 바라보는 방식으로 "무엇을 어떤 절차로 할 것인가?"가 핵심이 됩니다. 
즉, 어떤 기능을 어떤 순서로 처리하는가에 초점을 맞춥니다.

그러나 객체 지향 방식은 기능이 아닌 객체가 중심이 되며 "누가 어떤 일을 할 것인가?"가 핵심이 됩니다. 
즉, 객체를 도출하고 각각의 역할을 정의해 나가는 것에 초점을 맞춥니다.

## 객체 지향 프로그래밍의 특징

### 추상화(abstraction)

추상화는 현실 세계의 복잡한 개념이나 객체를 단순화하여 모델로 표현하는 과정입니다. 
예를 들어, 자동차를 추상화한다면 자동차의 핵심적인 특징들
예를들어 엔진, 바퀴, 핸들 등을 정의하고, 
주행, 정지, 방향전환 등의 동작(메서드)을 정의하는 것입니다. 
이렇게 추상화된 모델은 복잡한 개념을 단순화하여 이해하기 쉽게 만들어줍니다.

### 캡슐화(encapsulation)

캡슐화는 객체의 속성과 동작을 하나의 단위로 묶고, 외부에는 필요한 부분만 노출시키는 것을 의미합니다. 
예를 들어, 자동차 객체가 있다면 엔진, 바퀴, 핸들 등의 속성과 주행, 정지, 방향전환 등의 메서드를 객체 내부에 캡슐화합니다. 이렇게하면 외부에서는 자동차 객체의 기능을 사용할 수 있지만, 내부 구현 방식은 감춰집니다. 
이는 정보 은닉과 보안을 제공하며, 객체 간의 결합도를 낮추어 유연한 시스템을 구축할 수 있습니다.

### 상속성(inheritance)

상속은 객체지향에서 클래스들 간의 관계를 맺는 방법입니다. 
한 클래스가 다른 클래스의 특성을 상속받아 그 특성을 확장하거나 재사용할 수 있습니다. 
예를 들어, 동물 클래스가 있는 경우 고양이 클래스나 개 클래스처럼 
동물 클래스의 특성을 상속받아 공통적인 속성과 동작을 갖게 됩니다. 
이를 통해 코드의 재사용성을 높이고, 비슷한 기능을 가진 클래스들을 효율적으로 관리할 수 있습니다.

### 다형성(polymorphism)

다형성은 같은 이름의 메서드나 함수가 다양한 형태로 동작할 수 있는 능력을 가리킵니다. 
예를 들어, 동물 클래스에 "소리를 내다"라는 메서드가 있다고 가정해보겠습니다. 
각 동물 클래스마다 이 메서드를 다르게 재정의할 수 있습니다. 
따라서, 각각의 동물 객체는 자신의 특성에 맞게 다르게 소리를 내는 것이 가능해집니다. 
예를들어 사자는 어흥 하고 운다고 재정의하고, 고양이는 야옹하고 운다고 재정의합니다.
이는 유연한 코드 작성과 확장성을 제공하며, 객체 간의 상호작용을 다양하게 조합할 수 있습니다.

오버라이딩(Overriding) - 부모클래스의 메소드와 같은 이름을 사용하며 매개변수도 같되 내부 소스를 재정의하는 것
오버로딩(Overloading) - 같은 이름의 함수를 여러 개 정의한 후 매개변수를 다르게 하여 같은 이름을 경우에 따라 호출하여 사용하는 것


## 객체 지향 프로그래밍의 장점

첫번째, 소프트웨어의 생산성 향상
객체지향 프로그래밍은 다형성, 객체, 캡슐화 등 소프트웨어의 재사용을 지향합니다. 
이미 만들어진 클래스를 상속받거나 객체를 가져다 재사용하거나, 부분 수정을 통해, 소프트웨어를 작성하는 부담을 대폭 줄일 수 있습니다.
즉, 신뢰성 있는 소프트웨어를 손쉽게 작성할 수 있고 업그레이드가 쉽습니다.

두번째, 실세계에 대한 쉬운 모델링
컴퓨터가 산업 전반에 다양하게 활용되는 요즘 시대에는 응용 소프트웨어를 하나의 절차로 모델링하기 어렵습니다. 산업 전반에서 요구되는 응용 소프트웨어 특성상, 절차나 과정보다 관련된 많은 물체(객체)들의 상호 작용으로 묘사하는 것이 더 쉽고 적합합니다.
즉, 실세계에 대한 모델링을 좀 더 쉽게 해줍니다. (모든 것을 객체들의 상호작용으로 생각)

세번째, 보안성 향상
객체 지향적 프로그래밍의 캡슐화 특징으로 실제로 구현되는 부분을 외부에 드러나지 않도록 하여 정보를 은닉할 수 있습니다.

## 객체 지향 프로그래밍의 단점

느린 실행 속도가 있습니다.
객체 지향 프로그래밍은 캡슐화와 격리구조에 때문에 절차지향 프로그래밍과 비교하면 실행 속도가 느리다. 또한, 객체지향에서는 모든 것을 객체로 생각하기 때문에 추가적인 포인터 크기의 메모리와 연산에 대한 비용이 들어가게 된다.






------------------------------------





중복pk 저장시 처리


페이지나갈때 임시저장여부


저장 연속으로 하려고 하면 이미 추가된 행입니다 뜨는거 









