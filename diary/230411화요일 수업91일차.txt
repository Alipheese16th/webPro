어제 이어서 14장 마이바티스  했던거 훑어보기

1. pom.xml에 필요한 라이브러리 추가
(lombok, spring-jdbc, mybatis, mybatis-spring 총 4개)

2. web.xml 에 한글처리로직, *.do로 dispatcher 경로 바꾸기

3. db.properties 파일로 외부환경설정(dataSource에 필요한 db정보)

4. root-context.xml 에서 properties 파일 데이터 받아와서(context:property-placeholder사용) dataSource 객체 생성

5. Dto 만들고, config.xml 파일에 넣어놓기 (config 관련 !DOCTYPE 선언필요)

6. mapper 작성(mapper관련 !DOCTYPE 선언)후에 config.xml파일에 연결

7. root-context.xml 에 SqlSessionFactoryBean(dataSource와 config.xml 정보를 받음), SqlSessionTemplate 생성

8. dao인터페이스 생성(객체지향) 후 dao 생성(@Repository명시, 메서드는 sql문 단순사용) sessionTemplate를 @Autowired해서 사용

9. service인터페이스 생성(객체지향) 후 @Service 명시한 service 클래스 생성. 이 서비스는 dao를 autowired로 의존하고 해당 dao의 메소드를 사용한다. (이것도 객체지향때문에 인터페이스에 메서드를 작성후 오버라이드해야함)

10. controller에서 service를 autowired로 의존하고 사용함.

--------------
# 15장 Mybatis - 2

두번째 예제는 CRUD를 전부 활용해보자. 마이바티스에 익숙해져야한다

리스트는 조인테이블, 페이징

마이바티스에서는 config.xml이랑 mapper.xml을 이용해서 외부에서 sql문을 주입할수있다
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD config 3.0//EN" "https://mybatis.org/dtd/mybatis-3-config.dtd"> 을 명시한 xml파일을 이용



mapper관련 xml문서에서 쿼리를 작성할때 파라미터타입을 하나밖에 줄수없다. 
startRow랑 endRow까지 하나의 클래스 dto에 넣어야한다.
즉 입력할 데이터와 출력할데이터까지 한번에 dto에서 구성해야함

mapper 쿼리문에서 비교연산자로 < 등을 사용하고싶을경우 태그로 인식되지 않게 하려면
<![CDATA[ ]]> 로 감싸서 적으면된다

mapper 안에서 select나 insert등 원하는 태그로 sql문을 입력하면 되고 파라미터가 있으면 parameterType로 설정하고 출력형식을 resultType이나 resultMap으로 지정한다
sql문에 입력하는 부분은 #{}으로 입력한다

파라미터 타입이 dto여도 그 dto안에 job이라는 멤버변수가 있으면 #{job} 이라고만 sql에 끼워넣으면 알아서 멤버변수를 찾아서 입력한다

매개변수를 한개만 넣는경우는 파라미터타입을 dto가아니라 그냥 int나 String으로 해서 매개변수만 넣는것도 좋다

insert든 update든 delete든 update태그로 다 써도되는데 그래도 구분해서 하자.
그리고 셀렉트가 아닌 업데이트 관련 태그들은 resultType속성이 없다. 어차피 int형을 리턴함

dao를 생성할때는 interface로 먼저 구현해서 느슨한 결합으로 만들고 쿼리에 따른 메서드를 정의한다.
인터페이스를 상속받는 dao에 @Repository 를 명시하면 자동적으로 빈객체가 생성되게 된다.
root-context.xml에서 만든 SqlSessionTemplate 을 dao에 멤버변수로 가지게 하면서 @Autowired 해서 연결시킨다. 이 SqlSessionTemplate를 이용해서 오버라이드한 함수에서 쿼리를 사용

template의 메서드로는 
selectList() select문 중에서 조회결과 행 갯수가 여러개인경우
selectOne() select문 중에 결과가 한행 혹은 하나의값인경우
insert() insert문
update() update문
delete() delete문

매개변수가 한개인경우는 mapper.xml에서 정의한 쿼리 id를 문자열로 입력하고, 매개변수가 두개인경우는 sql에 입력할 파라미터를 넣는다

페이징을 위한 클래스를 따로 하나 만든다
멤버변수로 데이터들을 초기화하고
생성자함수에서 매개변수로 totCnt,pageNum,pageSize,blockSize등을 받고 페이징공식을 적용하면 된다.
그럼 이 객체를 생성하기만해도 모든 페이징관련 변수가 세팅이 된다.


서비스단- 인터페이스를 먼저 만들고 함수를 틀을 잡아둔다. 매개변수로 String pageNum등을 받음. 그리고 구현하는 클래스에 @Service를 작성하고 dao를 @Autowired로 연결해서 사용

컨트롤러에서 return 할때 forward나 redirect를 하는경우 경로에 .do를 꼭 붙여야한다
리퀘스트매핑에서는 붙여도,안붙여도 되니까 햇갈릴수있다.









--- 짤팁
게시판예제에서 c:if 태그로 만약 리스트 사이즈가 0이라면 검색결과가 없습니다. 라고 출력하고 아니라면 c:if 태그로 반대조건으로 반복문을 수행했는데
이 반대조건 if문은 사실 필요없다.
size가 0이라면 애초에 반복문을 실행하지 않아서 아무것도 없을테고
검색결과가 없습니다만 보일것이다

--- 복습
fmt:formatNumber 태그에서 groupingUsed="true" 속성을 주면 간단하게 3자리마다 컴마를 적용할수 있다.
그러나 디테일하게 패턴설정하고싶으면 pattern을 사용하자



