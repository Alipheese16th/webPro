우리는 팀프로젝트에서 마이바티스를 사용할거고
mybatis에는 DI개념이 꼭필요함


검색기능을 추가한다 -> 사용자 요구사항이 바뀐다 -> 대부분 이경우 쿼리가 바뀐다 

마이바티스에서는 쿼리를 xml에서 정의한다. 자바 소스는 변경없음

웹프로젝트 구동시 xml을 자동으로 파싱한다 그래서 미리 정의해두면 객체가 생성됨. 
근데 또 스프링부트는 xml이 없다. 이걸 자바로해야함

---
다시한번 어제하던 xml 생성자 하는중

기초데이터타입은 value 참조데이터타입은 ref 리스트형식은 list

------------------------------------------------------------

# 3장 di 설정방법 4가지 (스프링부트에서 사용하는 자바 설정)

프로젝트 새로생성 후 
pom.xml에 lombok 라이브러리 추가

pom.xml 에서 정의한 dependency 라이브러리들이
Maven 라이브러리인것이다.

그리고 이번에는 
<dependency>
  <groupId>cglib</groupId>
    <artifactId>cglib</artifactId>
  <version>2.2.2</version>
</dependency>
를 추가한다

ApplicationConfig 파일을 xml이 아닌 java로 쓰기 위해 필요
자바로 정의하는것(스프링부트 방법)

## 1번방법은 
어제부터했던 xml정의방법이라 생략

## 2번방법은 
자바 클래스를 만들고 @Configuration 를 선언한다. 
이건 객체용 클래스가 아니고 파싱할것이라는(xml대신 정의하는)

bean생성은 @Bean 아래에서 객체를 리턴하는 메소드를 정의한다
(메소드이름이 빈 변수이름)
메소드 내에서 객체를 생성자함수로 생성하고, setter로 속성도 정의하고
객체를 리턴한다

메인메서드에서는 AnnotationConfigApplicationContext 객체를 생성해서 생성자매개변수에 설정 클래스를 넣고 불러온다.

xml은 GenericXmlApplicationContext객체로 불러오는거. 둘다 상속관계에 있는 객체라 연관성이 짙다

## 3번방법은
xml안에 java파일을 포함시켜서 한번에 파싱 (메인메서드에서 컨테이너 객체를 따로 생성해서 각각 불러오지 않는 이유는 컨테이너를 두개만들게 되기때문. 컨테이너는 하나만)

xml 파일의 Namespaces 항목을 보면 이런저런 기능을 추가할수있는데
p는 빈 객체 생성할때 프로퍼티를 속성으로 쉽게 넣을수 있는것

context를 체크하면
<context:annotation-config/> 를 사용할수 있다
class내 annotation을 해석하라는 명령이다

그 이후
<bean class="자바파일경로">를 넣어주면 이 빈태그는
그냥 단순히 객체용클래스가 아니라 어노테이션을 해석해서 이 클래스를 파싱하게된다
즉 이 두줄만 추가하면 자바설정파일을 xml안에 포함시키는것이다

## 4번방법은
java 안에 xml 파일을 포함시켜서 한번에 파싱

이것도 간단하다
클래스 위에 어노테이션으로
@ImportResource(xml경로) 를 명시하면 끝난다

----------------------------------------------------

# 4장 di자동설정 / 빈 생명주기와 범위

그동안은 simple 프로젝트를 만들었는데
이번엔 Spring MVC Project를 만들것이다. Maven 라이브러리에 뭐가 더 많이 생김

---
## di 자동연결
프로젝트 규모가 조금만 커져도 빈객체가 수백개는 될테니 이 경우 빈간의 의존관계를  일일히 xml설정하는데 시간이 오래걸릴것이다. 자동으로 프로퍼티나 생성자 파라미터 값으로 동일 타입의 빈 객체를 전달하는 기능이 DI자동의존설정

@Autowired 를 클래스 내에서 명시하면
종속성 부품이 자동으로 달라붙는다. 
(A는 B 객체를 멤버변수로 갖고있다. A는 B를 의존함. A클래스에서 어노테이션 명시)

xml에서 일일히 프로퍼티 추가해주거나 생성자 추가해주거나 할필요없이 객체간 연결이 자동연결됨
단 xml에서 context:annotation-config를 설정해야 어노테이션을 해석한다

xml 에 Namespaces에서 c라는게 생겨있다 웹프로젝트에서 쓸수있음 이걸로 빈객체 생성할때 생성자매개변수 줄수있음
p는 프로퍼티 세터

서비스클래스에서 dao를 new 할일이 없다 이제
@Autowired하고 그냥 사용하면됨

---
## 빈 생명주기와 범위

### 빈 생성
빈객체용 클래스를 만들때
EnvironmentAware, InitializingBean
이 두 인터페이스를 구현하면
빈객체가 생성됐을때 호출되는 메서드를 사용할수있다
생성시 사용할 로직을 해당메서드에 정의하면됨.
둘중 하나만 구현하면됨

### 빈 소멸
DisposableBean 인터페이스를 구현하면 destroy() 메서드를 정의해서 사용할수있고 해당 메서드는 빈객체가 소멸될때 호출된다

그러나 더 간단한 방법이 있다
@PostConstruct 어노테이션을 명시하고 메서드를 정의하면
해당 메서드는 빈 객체가 생성될때 호출된다


메인메서드에서 
- 스프링 컨테이너 생성 (IOC 컨테이너 생성)
GenericXmlApplicationContext ctx = new GenericXmlApplicationContext();

- 파싱
ctx.load(“classpath:applicationCTX.xml”);

- 객체 생성
ctx.refresh();

- 빈 사용
Student st = ctx.getBean(“student”,Student.class); st.getName();

- 스프링 컨테이너 소멸 (빈 객체들 소멸)
ctx.close();

---

기본적으로 빈객체는 싱글톤(singleton)이다 사실 <bean 태그에 scope="singleton">
한것과 같음

scope="prototype" 으로 빈객체를 생성하면 메인함수에서 객체를 불러올때마다 별개의 객체를 만든다. 





추후에 service클래스도 어느 어노테이션을 쓰면 굳이 xml에 일일히 객체 생성을 명시하지않아도 자동으로 생성되고 dao도 그런 어노테이션이 있다
거기에 Autowired까지 사용하면 굉장히 편리하게 완성가능


aop는 프로젝트에 녹이면 좋지만 신입한테 바라진않는다






















