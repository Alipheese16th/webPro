
# 5장 외부파일을 이용한 설정

## Environment객체를 이용한 외부환경설정파일 사용

Environment 객체를 이용해야하기때문에 웹프로젝트(mvc프로젝트)로 생성

.properties 확장자의 파일에 map자료구조형 식으로 값을 넣는다
단, 스페이스는 금지. 스페이스까지 값으로 들어간다

admin.id=aaa
admin.pw=1111

Environment 객체에 properties 속성들이 저장되어있다
외부에서 환경설정할때 이 객체에 접근해서 속성을 입력하거나 꺼내오는것

IOC컨테이너를 생성하면 자동적으로 Environment객체가 생성
GenericXmlApplicationContext ctx = new GenericXmlApplicationContext();
ConfigurableEnvironment env = ctx.getEnvironment();

env객체를 이용해서 데이터를 관리해주는 PropertySources 객체에 접근
MutablePropertySources propertySources = env.getPropertySources();

이 프로퍼티소스들을 관리하는 객체에 addLast() 메서드를 이용해서
새로운 프로퍼티소스를 추가할수있다
new ResourcePropertySource("classpath:설정파일경로") 프로퍼티소스객체 생성
// 외부 설정파일을 ResourcePropertySource로 만들고 그것을 propertySources에 추가

이제 등록된 프로퍼티소스를 받아오고싶으면 
env.getProperty("key"); 를 사용하면 해당 key값의 value를 받아올수있다


## 외부환경설정파일로 객체 변수값 할당

xml 파싱하고 빈 객체를 생성할경우
빈객체의 클래스를 구성할떄
EnvironmentAware 인터페이스를 구현해서
setEnvironment(Environment environment) 메서드를 구현하면
이 빈객체가 생성될때 자동적으로 호출되는 메서드이다(env를 매개변수로 받는 메서드)
그럼 이 메서드안에 
adminId = environment.getProperty("admin.id");
이렇게 하면
이 빈 객체의 멤버변수를 자동적으로 할당할수있다. 마치 생성자함수처럼


## Environment 객체를 사용하지 않고 properties파일만 사용해서 설정하는법

사실 위에서는 외부파일을 env객체에 집어넣고 그걸 다시 꺼내서 객체에 할당하는 식으로
해서 그냥 아무 텍스트파일로 해도 됐지만 
이번 방법은 xml에서 외부파일을 다이렉트로 객체에 할당하는 방법이다
외부파일은 properties라는 확장자가 필수다

xml내에서 context 옵션키고 
(어제는 <context:annotation-config/>를 사용해봤다. 클래스의 어노테이션 해석)

<context:property-placeholder
 location="properties파일경로"/>
이걸 명시하면 해당 값을 전부 읽어온다

이제 프로퍼티 할당할때 value="${admin.id}" 이런식으로 사용할수있다

이 방법은 꼭 알고 있어야함

재정리하자면

1. 외부파일 (properties확장자) 작성
2. xml에서 객체 생성
3. xml에서 외부파일 가져오기
4. xml에서 객체에 가져온 값 할당

---
## 프로파일(profile) 속성을 이용한 설정
동일한 스프링 빈을 여러개 만들어 놓고 상황(환경)에 따라 적절한 스프링 빈을 사용 할 수 있게 되는것.

xml 설정에서 beans 태그내 profile="" 속성으로 구분한다
이걸 명시하지않으면 같은 이름의 빈객체를 중복 정의하게되므로 에러가 난다
그리고 xml을 여러개 정의하면 된다.
(팀프에서 쓸일은 없지만 실무에서 개발자환경과 사용자 환경을 분리할때 필요)

컨테이너객체를 생성할때 바로 xml들을 때려박으면 에러나니까
객체 생성부터하고
ctx.getEnvironment().setActiveProfiles("입력");
환경설정에 profile을 입력값으로 설정하면 해당 프로파일 xml만 활성화된다

---------------------------------------------------------------
6장 AOP(Aspect Oriented Programming)
공통기능과 핵심기능을 분리해서 연결시키는 작업


pom.xml에서 의존설정
<dependency>
	<groupId>org.aspectj</groupId>
	<artifactId>aspectjweaver</artifactId>
	<version>1.7.4</version>
</dependency>

여기서 용어가 햇갈릴수있는데 어차피 저쪽나라에서 만든용어니까 써보면서 익숙해지자

Join Point : 핵심 기능
PointCuts : 핵심기능의 부분으로 실제 advice를 적용해야 되는 부분
Aspect : 공통기능(기능자체)
Advice : 공통기능을 구현한 객체 메서드
Proxy : Advice가 적용되었을 때 만들어지는 객체
Weaving : Advice와 target이 결합되어서 프록시 객체를 만드는 과정
(advice를 핵심기능에 적용하는 행위)

객체별 핵심기능이 있을텐데 이 핵심기능(메서드)가 실행될때 공통기능이 추가적으로 실행되게 연결시키는 문법이다.


1번방법은 xml에서 연결시키는 작업이다
proxy클래스에서는 공통작업을 메서드로 구성해놓는다
aop속성을 xml에 추가하고
<aop:config>을 이용해서 proxy빈객체와 핵심기능빈객체를 연결시키는 작업을한다


2번방법은 어노테이션을 사용해서 연결한다
proxy클래스에 @Aspect를 명시한다
그리고 xml에 aop속성 넣고 <aop:aspectj-autoproxy/> 를 명시하면
proxy클래스에서 어노테이션으로 적용한것들이 전부 파싱된다

--------------------------------------------------------------
7장 MVC 기초

구조를 파악하는데 집중해야한다 처음엔 굉장히 복잡할수있음

요청경로에 / 가 들어가면 무조건 dispatcher에서 낚아채간다

css라는명칭이 섞여있으면 dispatcher가 무시해라 라는것을 명시해야 css가먹힌다
이걸 설정하는게 servlet-context.xml에서 설정하는것이다
확인해보면 resources는 이미 설정되어있다
그래서 리소시스폴더에 이것저것 넣어도 되는것


---
한글처리 filter추가 web.xml에서 처리

<!-- 한글처리 filter 추가 -->
<filter>
	<filter-name>encodingFilter</filter-name>
	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	<init-param>
		<param-name>encoding</param-name>
		<param-value>UTF-8</param-value>
	</init-param>
	<init-param>
		<param-name>forceEncoding</param-name>
		<param-value>true</param-value>
	</init-param>
</filter>
<filter-mapping>
	<filter-name>encodingFilter</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping>
---













