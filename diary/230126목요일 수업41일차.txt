6장 객체 ### 객체의 속성과 메소드---------------빅데이터(문서,텍스트,이미지,동영상,sns데이터,기상데이터,소셜데이터)형태나 구조가 정형화되지 않은 데이터 형식들로 다양한 형식의 모든 데이터반정형데이터(웹로그,보안및특성센서,마케팅정보,다양한장치데이터)정형 구조의 데이터 모델을 준수하지 않는 정형 데이터의 한 형태정형데이터(재고관리,재무정보,급여테이블,거래정보,거래처정보,인사정보)기간계,관리계,정보계,분석계 등 업무시스템 데이터자바스크립트에서의 객체와 똑같이 생긴 json파일 데이터 (반정형)---------------배열 내부에 있는 값을 요소(element),객체 내부에 있는 값은 속성(property).객체 속성중 함수형 자료형인 속성을 메소드라 부른다.객체 내 메소드 작성중 다른 변수를 사용할때 this를 꼭 붙여야한다 생략불가능.document.write(객체); 라고하면 객체.toString()이 호출된다. 재정의필요for-in문에서 객체의 key값을 가져올때 홀따옴표가 포함되어있기때문에 객체.키 라고 하면안되고 객체[키] 로 써야한다.toString()을 재정의하려면 for-in문을 이용해서 객체의 키값을 전부가져와서 출력하는 메소드를 만든다. 단 메소드는 if문으로 제외하지않으면 코드가 그대로 보이기때문에 if문으로 제외하는것이 중요. 자기자신 tostring도 제외한다.for-of문으로 하려면 조금 복잡한데 일단 직접적으로 객체에 사용해도 data가 출력되지않는다. key값을 뽑아야하는데Object.keys()에 객체를 매개변수로 넣으면 key값들이 배열로 리턴된다.그 배열을 가지고 for of문을 사용하면 key값들을 사용할수있는것이다.------------------for-of문자바에서의 확장for문과 비슷하다.js에서 for-in문은 index값을 가져오는것이지만 for-of문은 data를 가져오는것.arr = [10,20,30];for(var idx in arr){    document.write(arr[idx]+'<br>');}for(var data of arr){    document.write(data+'<br>');}------------------함수형언어에서는 객체에서나 배열에서나 마지막에도 , 를 찍는다alert() 는 <br>이 안먹기때문에 \nString.replace(oldStr,newStr); String에서 oldStr을 newStr로 교체 (처음 발견한 하나만)모든 oldStr을 바꾸고싶다면 내가 함수를 만들어야한다.replaceAll() 을 생성해본다.split() 문자열을 매개변수기준으로 나눠서 배열로 리턴join() 배열 사이사이에 매개변수값으로 붙여서 문자열로 리턴이 두개를 사용해서 replaceAll()을 생성. 오후에는 내장객체 String에 메소드를 추가해볼것이다.--------------------객체 속성 추가 및 삭제 별다른 제약없이 추가할수있다.만약 해당 이름의 키값이 이미 있다면 값이 수정된다.삭제는 delete() 이용해서 객체속성을 제거할수있다.------------객체로 이루어진배열추가할 속성이 있다면 반복문을 이용해서 일괄적으로 추가만약 중간에 오타가있더라도 큰 제약이 없이 출력이 된다.이러한 문제점을 반정형데이터라고 한다 ex) json파일-----------------함수를 이용한 객체 생성 객체를 return하는 함수를 만든다장점: 함수가 객체를  알아서 만들어주기때문에 속성이 오타날일도 없고 정형화되어있다.각종 속성을 매개변수로 정의해주고, 함수들을 정의한 후에toString을 재정의할때 for-in문을 사용하여 key를 this에서 가져와서 문자열로 길게 작성하고 return하면 된다. 단 if문으로 메소드는 걸러야하는데 싱글쿼테이션마크 주의해서 비교해야한다. ------------------------# 7장 생성자함수자바에서때처럼 new를 이용해 객체를 만드는 생성자함수.위의 일반함수와 다르게 return하는게 아니고 new로 만들어진 객체를 초기화시키는 과정을 넣는것이다. 자바의 생성자함수와 상당히 비슷하다.------------------### 프로토타입 공통적인 메소드 (toString 등) 는 중복된 내용이기에 메모리낭비가 심하다. 단 객체간 값이 다를수있는 데이터는 제외.프로토타입을 이용한 공통영역에 관리.생성자함수.prototype.메소드이름 = function(){내용};공통영역에서 메소드 관리우리가 전에 사용해봤었던 new Date().getTime() 도 이것처럼 생성자함수-prototype으로 만들어져있다.----------------------### 캡슐화 단 private이 없어서 캡슐화가 안되어있다.캡슐화와 비슷하게 만드는법.객체속성변수에 값을 넣는게 아니라지역변수를 만들어서 값을넣고해당 지역변수의 getter&setter를 만든다.지역변수는 밖에서 건들수없기때문에 캡슐화와 비슷한느낌.-----------------------### 예외예외발생시키기throw '예외메세지';예외발생시 공사중페이지로 이동try{ 예외발생가능구간 }catch(e){ 처리구간 }기본 내장객체인 location에 속성 href의 값을 조정처리구간에 location.href = '페이지주소';----------------------------------------------------------8장 기본내장객체 자바에서의 Integer클래스는 기본자료형인 int형과 차이가 아주 크다.toString이 가능하다. 객체이기때문. int형은 기본 자료형이기때문에 불가능. 딱 10의 값만 들어있다.그러나 자바스크립트나 파이썬에서는 상황이 다르다.표면적으로는 기본자료형같지만 사실 전부 객체와 거의 같다. toString도 있고 생성자함수도 있다.Number생성자함수의 prototype에 메소드를 추가하면 Number생성자로만든 객체든, 기본자료형인 number형이든 number형 변수는 전부 메소드를 가지게된다. 단! 객체로 만든 변수는 메소드를 추가할수있지만기본자료형은 메소드를 추가할수없다. (생성자 프로토타입만가능)정리하자면모든 변수는 객체와 같다고 생각하면된다.단 메소드는 일반적으로 넣지말고 (해당 객체만 사용할수 있고, 기본자료형은 아예 안되기때문) 프로토타입으로 넣는게 좋다.------------------### Object객체의 constructor() 생성자함수두 객체의 constructor를 비교해서 참이면 타입이 같은것이다. 생성자가 같기때문.------------------### Number : 숫자 객체 - toExponential(N) 지수형 표현  - toFixed(N) 소수점 N자리까지(반올림) - num.toPrecision(N) 숫자 N개만 출력 ------------------### String : 문자열을 다루기 위한 객체 - replace(oldStr,newStr) : 처음 발견한 oldStr을 newStr로 바꾼다. 모든 oldStr을 바꾸고싶다면 replaceAll() 함수를 새로 정의(String생성자함수의 prototype에) replaceAll은 상당히 쓸모가 많은데 글자 중간에 스페이스 있는것도 없앨수 있다. - length  해당 문자의 길이 - concat(str) 해당문자를 매개변수의 문자와 합친다 - substr(a,b) a번째부터 b개 글자 추출 - substring(a,b) a번째부터 b번째 앞까지 추출 - indexOf(a) 맨처음 a가 오는 위치 (없으면 -1) - lastIndexOf(a) 뒤에서부터 a가 오는 위치 - trim() 양쪽 space공간 없애기 - toUpperCase() 대문자로 전환 - toLowerCase() 소문자로 전환 ----------------정규표현식예제(함수형언어)/내용/ (슬래시로 감싸져있으면 패턴으로본다.)var patternNum = /[0-9]/;       			// 숫자 패턴var patternEng = /[a-zA-Z]/;    			// 알파벳 문자 패턴var patternKor = /[가-힣ㄱ-ㅎㅏ-ㅣ]/; 		// 한글문자 패턴var patternSpc = /[~`!@#$%^&*()-_+=|\\\[\]{}'":;?,.\/]/;  //특수문자패턴patternNum.test(str)str에 숫자가 있는지 여부 확인 true false/^내용$/  (시작할땐 ^ 끝날땐 $ 패턴비교할때 사용법)var patternMail = /^\w+@\w+(\.\w+){1,2}$/;   // 패턴이 일치하는지 str.match(정규표현식패턴) : 정규표현식패턴과 맞는 text를 return. 없으면 null-------------------------------------구글검색var 지역변수 캡슐화 prototype 생성자함수 관계-------------다시복습 for문에서 객체의 key를 가져오면 '' 싱글쿼테이션마크가 붙어서 들어온다.객체[key]라고 써야함.객체 속성에 싱글쿼테이션마크 붙는다는거 계속 생각해야함. 겁나햇갈린다. 배열에서 쓸수있는 forEach() 함수의 매개변수는 첫번째가 data 두번째가 idxjs나 파이썬같은 함수형언어에서는 모든 데이터는 표면적으로 기본자료형같아보이는 데이터도 사실 전부 객체다. 생성자함수도 있고 toString도 있다 