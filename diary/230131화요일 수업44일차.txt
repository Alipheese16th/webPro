# 11장 이벤트

마우스 이벤트, 키보드 이벤트, HTML 프레임 이벤트, HTML 입력 양식 이벤트, 유저 인터페이스 이벤트, 구조 변화 이벤트, 터치 이벤트

(ex) onclick, onmouseover, onmouseout, onkeyup(키보드의 특정키를 눌렀다가 올라올 때, event.keyCode 해당키의 고유 코드값..)

event.keyCode 키보드 받는 값

--------------------
### 인라인 이벤트 모델

문서객체에 이벤트를 연결하는 방법
<h1 onclick="whenClick();">Click</h1>
태그에 onclick 걸고 스크립트에서 함수 만들어놓는방법 

그동안 써왔던 쉬운방법
------------------
### 기본 이벤트 모델 (고전적 이벤트 모델)

 객체를 key값과 객체[key]값으로 반복문배열활용해서 펼쳐보면 수많은 속성이 있는데. 모든 문서객체모델에 동등하게 이벤트속성이 있다. 대부분 이벤트 속성에는 null 값이 들어있어 아무일도 일어나지 않는것이다.
 
해당 문서객체의 이벤트 속성에 function을 할당하면 이벤트를 설정한것이다.
--------------------
### 표준 이벤트 모델

문서객체모델의 속성들 목록을 보면 수많은 속성이 있는데 이러한 함수가있다.
addEventListner('이벤트명',함수)
문서객체의 이 메소드를 사용하면, 해당 이벤트명의 상황이 발생시 함수를 발동한다. 
★이벤트명 : on을 제외한 이름

--------------------
### this의 사용 
이벤트가 발생된 컴포넌트 객체를 this로 호출한다.
함수구성시 this를 사용하여 css설정을 한다든가 사용할수있는데
화살표함수시 this는 사용불가능하다.

------------------
### 이벤트 강제 발생

해당 컴포넌트의 함수를 호출하면 강제로 실행된다.
------------------
### 이벤트 제거 

이벤트속성에 다시 null 값으로 초기화 시키면된다.
이벤트 제거를 하는 이유는 특정횟수만 사용하게 하고나서 (cnt변수) 해당횟수 초과시 이벤트 제거하는 경우가 있다.

-------------------
### 이벤트 제한(ex.submit)
이미 사용해보았던 방법이다.
내가 정의하지않아도 onsubmit 이벤트속성은 기본적으로 디폴트 이벤트가 정의되어 있다.
이 디폴트 이벤트를 내가 만져서 제한하는게 이벤트 제한.
--------------------
### 이벤트 전달  
어떠한 이벤트가 먼저 발생해 어떤 순서로 발생하는지를 이벤트 전달이라 한다. 자바스크립트는 자식 노드에서 부모 노드 순으로 이벤트를 실행한다. 이를 이벤트 버블링 방식이라 한다.

----------------------------
예제 1~6번 풀어보기 
-----------------------------
### 키보드 입력 이벤트 (event.keyCode)
키보드를 보면 숫자 1이 두개가 있다.
변수의 값을 지정할때의 경우에는 같은 값이다.(아스키코드)
게임할때보면 각각의 키가 기능이 틀리다(event.keyCode)
event.keyCode 값이 키보드 입력값
엄연히보면 아스키코드와는 다르지만 어느정도는 비슷하다(대문자알파벳도 아스키코드 수와 공유함)

String.fromCodePoint(아스키코드)
아스키코드값을 문자로 return
-----------------------
### 좌표 이벤트(event.screenX or Y  event.offsetX or Y )
event.offsetX와 event.offsetY(클릭한 곳의 offset좌표)
offset좌표 = 브라우저 내 좌표

event.screenX와 event.screenY(클릭한 곳의 screen좌표)
screen좌표 = 모니터 좌표 

-------------------------
1번 예제
window.onkeyup = function(){
윈도우객체 onkeyup 속성에서 함수구성을한다. 어디에서나 키보드를 눌럿다떼면 이벤트가 발동.
var key = event.keyCode; 
이벤트중에 일어나는 키코드값을 알아내는 변수

if조건문으로 만약 이 키코드값이 내가 원하는 값들중 하나라면 css를 변화시킨다. 
--------------------
2번예제
s를 눌렀을때와 X를 눌렀을때의 keyCode값 확인해서 if문에 추가
불리언 변수를 전역변수로 하나 생성해놓고
s누르면 true x누르면 false로 해놓고
true일때만 1번예제의 식을 실행하도록 조건추가
-----------------------------
3번예제
상하좌우키의 keyCode값에 대응하여 switch문으로 실행 (조건문도 상관없다)
전역변수로 숫자형값 하나 디폴트로 4 넣어놓고
상하좌우키에 대응하도록 변수값을 더하거나 뺀다.
변수값에 따라 td배열의 인덱스 순서에 맞춰서 css설정을 한다.
-----------------------------
4번예제
해당 이미지의 onmouseover 이벤트 속성을 설정한다. (마우스 갖다대면 이미지 바뀜)
이미지 바꾸는건 setAttribute(속성,값) 태그의 속성 설정

단 여기서 주의할점은 반복문에서 i값을 var로 두면 전역변수가 되어버리기때문에 반복문에서 함수를 만들때 (onmouseover) i값을 이용하면 반복문이 끝난 후에 함수호출시 전역변수 i값을 가져오게된다. let i 로 사용해야한다.
마찬가지로 onmouseout 속성도 설정하면 끝
----------------------------
5번예제
이미지를 누르면 (onmousedown) 이미지를 바꾸는것(setAttribute())
마우스를 떼면 (onmouseup) 다시 원래이미지로 
----------------------------
6번예제
이미지를 숨겨놓고 (display: none; position:absolute;)
window.onclick 윈도우에서 클릭시
해당좌표 출력 (event.screenX,event.screenY,event.offsetX,event.offsetY)
이미지 출력(img.style.display = 'inline'(혹은 블럭도 가능)
img.style.left = event.offsetX+'px';
img.style.top = event.offsetY+'px';




---------------------복습 
화살표함수를 쓰지못하는 경우
arguments배열이 없다. this가 없다.
보통 this는 함수호출한 개체를 말하는데 얘는 this가없기때문에 window의 this를 가리키게된다. 

script에서 뭔가를 하려고할때는 항상 window.onload를 생각하자. document가 생성되기전에 할수는없으니까 

form태그 action="" 안쓰면 어차피 내 페이지로 전달. method="get" 안써도 디폴트 get방식이다.
onsubmit 이벤트속성은 form태그에서 관리. input에서 하는게아님 

반복문에서 i 를 var로 설정하면 안되는이유
반복문안에서 함수를 설정한다고 하면 해당 함수는 i를 참조하고있을텐데 나중에 함수가 실행될때 i의 값을 전역변수로서 가져오게되니 반복문이 끝난 i의 값을 참조하게 된다. 이런이유로 i를 let으로 설정해야한다.

