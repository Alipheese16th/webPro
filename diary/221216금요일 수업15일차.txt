 # 예외(Exception)  

 ### 예외란?  
문제 없을 것 같은 프로그램도 외부환경요인 등에 의해서 문제가 발생하곤 합니다.
프로그램에서 문제가 발생될 만한 곳을 예상하여 사전에 "문제가 발생하면 이렇게 해라"
라고 프로그래밍 하는 것을 예외 처리라고 합니다.  




 ### 예외처리의 필요성  
프로그래머는 예외 처리를 왜 해야 될까요? 몇 달 동안 심혈을 기울여 만들어 놓은 프로젝트가 
단순한 어떤 이유로 작동을 하지 않다면 프로그램의 프로세스가 완전 죽은 겁니다. 
다시 재가동을 시키지 않으면 움직이지 않는 상태가 된 겁니다.
 예외의 필요성은 어느 한 부분에서 예외가 발생하더라도 계속해서 프로그램이 동작되도록 하는데 
목적이 있습니다. 어떤 문제가 하나 발생되었다고 그 프로세스가 완전히 정지되어 
시스템을 재가동하기 전까지는 구동을 아예 못한다고 한다면 너무 많은 손실이 클 것입니다. 
그래서 사소한 문제 같은 경우에는 그 문제를 우회해서 가는 방법으로 프로세스가 죽지 않고 
계속 구동하도록 프로그래밍하는 방법이 필요합니다.   


 ### 예외처리 문법  
1.try-catch문  
2.throws문  

예외가 발생하면 예외객체가 생성이 된다.
예외클래스들은 상속관계가 있기때문에 부모클래스의 예외클래스를 매개변수로 사용해서 
여러 예외상황을 한번에 다룰수도 있다.



 # 어레이리스트  
ArrayList 인덱스순서대로 차곡차곡 쌓는다. remove하면 일일히 인덱스가 바뀌어서 과부하.

LinkedList 값끼리 서로 연결되어있다. 입력하는건 오래걸리지만 remove는 빠르다.





https://dingrr.com/blog/post/%EC%9E%85%EB%AC%B8%EC%9E%90%EC%97%90%EA%B2%8C-java%EB%83%90-python%EC%9D%B4%EB%83%90-%EA%B7%B8%EA%B2%83%EC%9D%B4-%EB%AC%B8%EC%A0%9C%EB%A1%9C%EB%8B%A4
집가서복습 대출도서


 ##### 여러가지  
ctrl + T  해당클래스의 상속체계 확인가능 
