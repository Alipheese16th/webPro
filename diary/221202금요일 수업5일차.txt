1.메서드, 2.객체지향 프로그램의 본질 

메소드- 객체지향이 나오기전에 효율적으로 프로그래밍을 위해 쓰던 방법 

스프링은 패키지를 만들때 3가지의 디렉토리를 만들어야 
클래스가 제대로 구동이 된다. 그래서 패키지만들때 com.lec.ex

if문도 좋지만 둘중 하나를 고를때는 삼항연산자도 써보자

return이란 호출한곳으로 반환한다.
메소드를 만들때 void가 아니라면 리턴값이 꼭 필요
메소드를 만들때 void인지 String인지 int인지 타입은 리턴값과 일치해야함

static은 메인메소드랑 같은 static이기때문에 바로 사용하면되고
nonstatic은 인스턴스를 만들어서 쓰면 된다 

public 전부 쓸수있다
default 같은패키지에서만 사용가능
private 같은 클래스에서만 사용가능

java.lang 이거나 같은패키지 라면 import 를 안해도 된다.

클래스는 메모리영역에 없다.  
static 메소드는 정적으로 바뀌어서 작동이 되지만
일반 메소드는 따로 메모리영역을 잡아줘야한다.
클래스변수(객체)를 만든다 = 객체데이터타입(참조데이터)
그럼 그 클래스 안의 non-static 메소드를 사용가능 

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
객체(Object) VS 인스턴스(Instance)
클래스의 타입으로 선언되었을 때 객체라고 부르고, 
그 객체가 메모리에 할당되어 실제 사용될 때 인스턴스라고 부른다.
객체는 현실 세계에 가깝고, 인스턴스는 소프트웨어 세계에 가깝다.
객체는 ‘실체’, 인스턴스는 ‘관계’에 초점을 맞춘다.
객체를 ‘클래스의 인스턴스’라고도 부른다.
예를들어 붕어빵을 만든다고 상황을 가정해보자. 
여기서 클래스는 붕어빵을 만들기 위한 틀이 되고 객체는 붕어빵이다. 
그리고 인스턴스는 붕어빵 틀로 찍어낸 각각의 붕어빵이다.
팥붕어빵과 슈크림붕어빵은 같은 타입의 객체이지만, 
인스턴스 관점으로 보았을 때는 다르다.
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

메소드형식
(접근제한자) (static) 리턴type 메소드명(매개변수(파라미터)){
리턴이 없을경우 리턴type은 void
처리할 프로세스들
}

함수 오버로딩은 매개변수 개수 또는 종류(데이터타입)로 분리된다
같은 형식의 메소드를 여러 기능을 추가하는게 오버로딩 


자바 팩토리얼 


