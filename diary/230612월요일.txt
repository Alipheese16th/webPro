
# 뷰 강의

1. props
부모컴포넌트에서 자식 컴포넌트로 데이터 전달

2. $emit
자식컴포넌트에서 부모컴포넌트로 전달

3. slot
부모컴포넌트에서 자식컴포넌트로 전달,
자식에서 props로 부모컴포넌트에 전달

4. 라이프사이클
beforeCreate, created, beforeMount, mounted, beforeUpdate, updated, beforeDestroy, destroyed




-----

6 23 ~ 6 29 평가 과제   
6 30 발표 및 회시 

# 프로젝트웨어
출퇴근, 휴가, 비용청구 등등
로그인은 ip가 남아있으

휴가 결재는 소속프로젝트PM님에게 결재
참조는 노현정과장님에게
개인사유는 그냥 개인사유

변수명 설정할때 프로젝트웨어 자료실 - 3.0Document 참고 - 표준용어정의서

비용청구는 엑셀양식이있다 본인이 할일은 거의없다

# 프로젝트투입
선임 커피 생활내용 안내받기 출퇴근시간 화장실 식당
개발환경세팅, 개발표준가이드문서라도 볼수있도록 조치받기
프로젝트웨어 조직도 보고 전화번호 비상연락망등 할수있는 일 찾기
정 할이없으면 PM에게 일을 달라고 한다.
개인메일발송금지,휴대폰촬영금지,usb반입금지등 보안관련 조심
본사에서 장비반출시 노현정과장님께 말씀드리고 노과장님께서 관리하는 양식에 서명후 반출

# 프로젝트 현장 가이드
엄홍석 부장님이 만드신
분석 - 논리데이터 구조 작성, 논리 erd, 요구사항정의서 등 착수보고
설계 - 물리데이터 구조 작성, 메뉴목록 작성, 물리 erd 등 설계단계 검수, 중간보고
개발 - 코딩, 단위테스트, 단위테스트 결과서
테스트 - 테스트 시나리오 작성, 수행, 통합테스트 결과서, 3자 테스트
이행 - 데이터 마이그레이션, 운영환경세팅, 소스코드 이행, 사용자 메뉴얼, 운영자 메뉴얼

계획대로 수립하고 진행하는게 거의 전부다
ㅡ러나 계획대로 안되는게 있다
프로젝트 수행 방법론
Waterfall model (공부 필요)
Agile model
워터폴 관련 알아보자 거의 대부분 이방식

as-is 분석, to-be 모델

프로젝트 지시는 반드시 우리 회사 현장관리자에게만 받는다.
개발분량이 많다고 스트레스 받지 말고 좋아하자
일정 지연이 발생할거 같으면 관리자에게 미리 보고하자
모르는것은 잘 물어보자 담나 묻기전에 검색을 좀 해보고 노력을 하자
내가 물어보자하는것을 명확하게 정의하고 물어봐야한다

# 일을 못하는 기준
1. 회신/피드배이 늦음
본인때문에 다른사람의 진행이 안됨
꼭 완료 후 회신이 아니여도 됨. 언제까지 진행하겠다고 하면 됩니다
반대로 내가 요청한 내용이 회신이 없으면 무작정 기다림
그럴때는 무작정 기다리지말고 내 요청사항에 대해서 회신이 언제까지 않오면 몇일 지연될수있다고 상대방과 본인의 의사결정권자에게 미리 알려줘야한다

2. 스스로의한계를모름
세상에 무조건적인 가능은 없다
어떻게 하면 가능한지 어느선을 넘어가면 안되는지 판단해야한다 자기객관화
당장 판단이 안된다면 일단 진행해보면서 중간보고를 계속적으로 해야한다

3. 결국 위의 두가지는 중간보고/공유를 안하는것
본인의 일정지연 또는 이슈가 되지 않을거라는 판단은 본인이아니라 상사나 동료가 한다
업무지시를 받았는데 어디서부터 시작해야할지 모르겠다
업무지시자가 불시에 물어볼수 있으므로 미리미리보고
미리보고하면 추가적인 보고가 필요없을경우는 공유

# 일을 잘하는 기준
한국사람은 주체성이 강해서 의사소통이 힘들다

1. Dead Line (중요!!!!!!)
기본중의 기본이다
일 시작 전 로직이나 절차 등을 먼저 메모하고 머리속에서 정리하고 시작하자
단순작업이나 반복되는 작업이라면 쉽고빠르게할수있는방법 또는 작업도구를 찾아보는걸 습관화 합시다
(개발 도우미 : DVO, DataSet 자동생성등)

2. 작업지시자의 의도를 파악해보자. 고민을 해보자
이것을 왜 만들까?
작업지시자가 검토만하고 바로 고객에게 보낼수 있을정도로 만들어서 보내야한다

3. 보고/공유의 목적은 결국 의사소통
축구처럼 빌드업 하지말고, 핵심요약 먼저 두괄식으로 시작하고 상세한 내용은 뒤족에서 설명하자
의사결정을 요청하거나 이슈(문제)보고는 대안을 한번 생각보고 각 대안의 장단점과 같이 넣어서
보고는 수치화하여 추상적이지 않도록 객관적으로 (거의 다 되었습니다! VS 50개중 48개 완료했습니다)
본인의 업무를 숫자화 해서 생각해보자

4. 질문해도 문제 안해도 문제
## 질문해도 문제인경우
잘못된 질문 (이미끝났어야했을 데드라인질문)
찾아보지 않고 질문(인터넷 검색시 나오는 내용)
타이밍이 잘못된 질문(바쁠때 중요하지않은내용, 분위기 안좋을때)(근데 욕먹더라도 질문해야한다 이경우는)
## 질문안했는데 문제인 경우
### 질문을 해야하는데 안하는경우
뭐부터하면될까요? 프로세스 순서
소스나 산출물 참고 할게 있을까요?
여기까지 하면 될까요? (기간,수주)
### 실무 기본
용어:검색부터 해보고 물어봅시다
개념:검색후 이해한내용 맞는지 질문
### 질문하고 답변은 들었는데 여전히 모르는경우
What, Why, How 무엇을 왜, 어떻게 하는가 를 알아야한다

# 실수
실수인지 아닌지 긴가민가하면 99% 실수다 빨리 알려야한다
실수를 방치하면 복구비용이 더 커진다
신입때 실수를 많이하는것이다 신입버프
1. 내가 뭘해서 실수하는경우
체크리스트를 만들어서 항상 체크를 하면서 업무하자
2. 내가 뭘 안해서 실수하는경우
업무 flow / 로직을 업무 시작전 메모장이나 pc에 미리 정리하고 최종단계에서 점검하면 누락은 안할것이다
3. 내가 실수 했는데 모르는경우
주변인과 크로스체크
4. 인정과 사과
(제가 그런거 아닌데요.) 이런식으로 책임회피 하지말고
내 실수 아니어도 깔끔하게 인정하고 사과해서 성숙한 사람인 척하자. 결국에 범인은 밝혀진다

# 일하는 순서
## 우선긴급관리
주단위로 설정해서 긴급/중요도로 선정하여 내가 선정하였으면 선임이나 작업지시자에게 확인받자
까먹고 일을 더 주신다면 내가 선정한 순위를 말씀드리고 조정을 요청한다
## 일정관리
전체적인 일정을 화면/기능 단위로 쪼갤수 있는 단위로 쪼개서 일단위 일정을 만든다
세분화된 일정은 오늘오전할일, 오늘오후할일로 나눠서 진행한다
개발완료일자는 테스트까지 끝난 상태여야한다
## 의사소통
스몰토크
본인이 이해한 내용을 업무지시자에게 맞는지 다시 설명해볼수 있는 시간
제3자로부터 전달받은 내용도 "배달사고"를 최소화하기 위해 의도 및 배경을 확인할수있다
상사가 궁금해해볼거같은 중요한 업무는 물어보기전에 미리 일의 진행상태를 말씀드리자

1. 상사가 직원에게 업무지시
2. 상사에게 데드라인을 여쭤본다(업무지시의 의도와 내 앞/뒤 프로세스나 일정을 같이 파악하면 더욱 좋다



5분스피치 내일 주제는 인터페이스


시스템테이블
모든 테이블정보

table_catalog = 데이터베이스명
table_schema = 스키마명
table_name = 테이블명
information_schema = 시스템카탈로그 테이블
pg_catalog = 각 db내부에 존재하는 스키마
pg_tables = 테이블들

information_schema.tables 현재 데이터베이스에 정의된 모든 테이블과 뷰가 포함된다. 현재 사요자가 엑세스 할수 있는 테이블 및 뷰만 표시
information_schema.columns 데이터베이스의 모든 컬럼에 대한 정보. 시스템 열(ctid등)은 포함되지 않고 현재 사용자가 엑세스할 수 있는 열만 표시된다
information_schema.table_constraints 현재 사용자가 소유하거나 다른 권한이 있는 테이블에 속하는 모든 제약조건이 포함된다
information_schema.key_column_usage 일부 고유,기본 키 또는 외래 키 제약 조건으로 제한되는 현재 데이터베이스의 모든 열을 식별

obj_description(테이블의oid) 해당 테이블의 주석을 불러오는 함수
col_description(테이블의oid, 컬럼의 ordinal_postion) 컬럼의 주석을 불러오는 함수

pg_class는 테이블,뷰,인덱스,시퀀스,타입 등 컬럼을 제외한 대부분의 오브젝트를 담고 있다


PostgreSQL에서 "pg_"로 시작하는 객체 이름은 일반적으로 PostgreSQL의 시스템 카탈로그(schema)에 속하는 객체를 나타냅니다. 시스템 카탈로그는 PostgreSQL 서버 자체의 메타데이터를 저장하는 데이터베이스의 특별한 스키마입니다. 이러한 시스템 카탈로그 객체는 PostgreSQL 서버의 내부 동작 및 구성을 제어하고 관리하는 데 사용됩니다.

여러 가지 시스템 카탈로그 객체 중에서 "pg_catalog" 스키마는 PostgreSQL 서버의 핵심 카탈로그 스키마입니다. 이 스키마에는 데이터베이스, 테이블, 인덱스, 함수, 연산자 등과 같은 중요한 메타데이터 정보가 포함되어 있습니다. 예를 들어, "pg_class" 테이블은 데이터베이스 내의 테이블에 대한 정보를 저장하며, "pg_proc" 테이블은 데이터베이스 내의 함수에 대한 정보를 저장합니다.

pg_catalog 스키마에 있는 객체들은 일반적으로 직접 접근하거나 수정하는 것이 권장되지 않습니다. 대부분의 일반 사용자는 이러한 시스템 카탈로그 객체를 쿼리하여 메타데이터 정보를 검색하거나 분석하는 용도로 사용합니다. PostgreSQL은 보다 안정적인 동작을 위해 시스템 카탈로그 객체를 보호하고, 변경 또는 삭제할 때에는 주의가 필요합니다.


