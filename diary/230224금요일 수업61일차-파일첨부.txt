# 어제 이어서 14장 파일첨부

MultipartRequest객체를 생성해서 파일첨부를 처리한다
path 경로가 다르거나, maxsize를 넘어서거나 하면 예외로 떨어진다

파일이아닌 일반 문자열 파라미터도 멀티파트객체로 받는게 낫다.
미리받으면 안돼요?  좀 불안정하다

----
도서관 책 등록 프로그램 예제
SQL에서 테이블부터 만든다
책 테이블, 책 시퀀스

1. 책 등록 insert문 로직구현
2. 책 리스트 목록 출력 구현 , 페이징을 위한 top-n 구문도 출력
3. 등록된 모든 책 갯수 구하는것도 필요함. 페이징때문에
4. 상세보기 페이지 (책번호로 책정보를 가져오기)

이번에는 페이지사이즈를 3개로  블록사이즈는 4개로 해볼것이다

dto, dao 구현
로직 다 구현하면됨 너무 지루함 생략
---
책등록페이지 form태그 jsp페이지작성

다시 말하지만 파일 업로드가 가능한 form 태그를 작성할때는
enctype="multipart/form-data"
를 명시해줘야한다
메소드는 post

파일첨부때는 bean태그를 못쓴다 아쉽게도

input type="text"에 쓸수있는 속성중 하나가 maxlength="33"
이런식으로 최대글자수를 제한할수도 있다
type="number"  min max 로 최소,최대 수를 정할수도있음
---
등록처리 프로세스 jsp페이지

절대경로부터 구한다
String path = request.getRealPath("bookImg");
톰캣서버의 wtpwebapps 안의 컨택스트 루트 경로
최대용량도 정한다. 1024 * 1024 = 1 메가
int maxSize = 1024*1024*3; // 최대 업로드 사이즈 : 3MB
이미지 이름들을 받을 변수도 초기화시킨다(여러개면 배열)
String[] images = {"",""};

mRequest = new MultipartRequest(request,path,maxSize,"utf-8",new DefaultFileRenamePolicy());
생성자 매개변수 5개
1. request
요청객체를 위임한다. 이제 request는 사용못함  멀티파트리퀘스트로 사용
2. path
파일을 저장할 절대경로를 지정.
3. maxSize
파일 최대용량 지정
4. "utf-8"
여기서 인코딩을 지정. 그래서 request.setCharacterEncoding 같은건 필요없다 
5. new DefaultFileRenamePolicy()
혹시라도 파일 이름이 중복일 경우 자동으로 처리해주는 객체


서버로 올려진 파일을 소스폴더로 복사
인풋스트림, 아웃풋스트림 객체 생성
File 클래스형 객체변수 생성 생성자매개변수는 절대경로 + 파일이름
파일인풋스트림 생성자 매개변수에 위의 파일을 넣고 생성
파일아웃풋스트림 생성자 매개변수에 새로 복붙할 경로 + 파이이름 을 지정
파일을 복붙하는 속도를 올려줄 바이트형 배열을 생성
배열 길이는 파일.length() 인데 (int)형으로 형변환해야함 기본값 long

이제 is.read(bs) 해서 배열만큼 읽고 
if(readByteCnt==-1) break; 만약 읽을게 없으면 브레이크
os.write(bs,0,readByteCnt);
bs그릇의 0번방부터 읽은만큼방까지 write

--- 여기까진 어제도 했던거
오늘은 DB에 데이터를 저장할것이다

멀티파트리퀘스트 객체로 getParameter를 이용해서 매개변수들을 다 받아오는데
파일이름의 경우 위에서 구한값이 있다
그러나 그냥 대입하면안된다 왜냐?
null 이 들어가있을수도 있다. 첨부를 안할수도 있기때문
String bimage1 = images[1]!=null?images[1]:"noImg.png";
null 이 아닐경우에만 값을 대입하고 null 인경우엔 미리 준비해둔 디폴트 이미지 이름을 지정
다른건 전에도 해봤으니 쉽다 파일이미지이름까지 다 구했으면
DAO 불러서 db저장 쿼리 실행하는 메서드 호출하면 끝

지금은 게시판이아니라 책등록프로그램이라 ip는 필요없지만
만약 게시판예제라면 ip를 어디서구했엇냐
reqeust.getRemoteAddr() 이걸로 구했었다.
나중에 파일첨부게시판을 만들게 될텐데 그러면 멀티파트리퀘스트로는 매개변수 구하는 메소드말고는 사용할수가 없기때문에
그냥 request 객체를 사용해야한다. 이건 문제 없음

-----------
이제 게시판, 페이징을 이용해 책 목록을 출력해보는 예제를 해볼것이다

페이지 사이즈는 3 블록사이즈는 4 
저번에 시작번호 끝번호 구하는 공식은 노트폴더 - 엑셀파일에 다 있다

현재 페이지가 null 이면 첫실행화면이라 매개변수 받은게 없는거라 "1"로 초기화해주고
아니면 문자열로 매개변수가 들어올테니 Integer.parseInt로 숫자로 변환해주고
현재 페이지에 따라서 공식을 구한다

그럽 TOP-N구문으로 해당 페이지만 출력 가능

이제 아랫단에 페이지수를 알아야함.
현재페이지와 블록사이즈에 따른 스타트페이지, 엔드페이지 값을 구함
이것도 엑셀에 나와있다

단 엔드페이지가 총 페이지수보다 많으면 총페이지수로 덮어씌워야함
전체 글 갯수를 알아내는 dao 메소드를 사용해서 구해내고 
전체 글 갯수로 총 페이지수를 알아낼수 있음 
int pageCnt = (int)Math.ceil((double)bookTotalCnt/PAGESIZE);

나눌때 double형으로 나눠야 제대로 나눠지고
그걸 Math.ceil로 천장으로 올리고
결과값이 .0 으로 끝나는 소수라 (int)로 다시 형변환

만약 스타트페이지가 블록사이즈보다 크면 최소 한번이상 오른쪽으로 넘어갔다는 상황이니 [ 이전 ] 버튼을 추가로 생성한다.

그후 반복문으로 인덱스 시작은 startPage 끝은 endPage 로 반복해서
인덱스값이 만약 현재페이지와 같다면 굵게 강조표시하고
아니면 반복문으로 출력하는데 <a>태그로 감싸서 이동할수있게하고 매개변수로 i값을 pageNum으로 전달해줘야함.

만약 엔드페이지가 총페이지수보다 작다면 다음이 있다는 것이니까 [ 다음 ] 버튼을 생성

여기까지 한건 게시판스타일
------------------------------------------
이제 쿠팡처럼 product 스타일로 출력해볼것이다
라곤 해도 사실 별거없다 그냥 일반반복문으로 출력하는데
n번째 마다 줄바꿈하면 되는거
그러나 주의사항이 </tr><tr>을 어느타이밍에 어느 코드위치에 붙이냐에따라 마지막 갯수가 떨어지는것에 따라서 이상하게 보일수도 있으니 조심











-----------구글 공부
https://okky.kr/articles/71363

.toString()  -- 객체 내의 메서드를 사용하는것
(String)   -- 컴파일러에 타입을 명시해주는것뿐
두개의 차이

------------
프로젝트때는 헤더랑 푸터를 꼭 넣어야 한다
그러려면 jsp:include 를 사용해야해서 jsp파일로만 가능하다

----- 복습
테이블생성시 다른 테이블의 필드를 참조해오는
포림키를 만든다고 했을때
NOT NULL을 명시하지않으면 NULL이 들어갈수 있다
신입사원이 특히 햇갈려하는 실수
즉 다른테이블의 필드값을 제외한 값은 받지 않고
NULL값도 허용하지 않으려면
NOT NULL도 명시해줘야한다

요즘은 웹으로 관리하기때문에 웹서버는 데이터베이스서버와 분리되어 있기때문에
데이터베이스에 BLOB로 이미지파일등을 저장하는게 아니라 이름만 저장하고 파일은 따로저장한다

시퀀스 생성
START WITH 1 굳이 안써도 된다 기본이 1임  
INCREMENT BY 1 도 마찬가지로 생략 가능
NOCACHE 도 꼭해야한다 쓸데없이 미리 만들어놓았다가 컴 재부팅시 그 다음꺼부터 만들기때문에 이상해짐
사실상 MAXVALUE와 NOCACHE NOCYCLE 3개만 명시하면됨

INSERT INTO 테이블 (A,B,C) VALUES (A,B,C);
테이블 뒤에 컬럼을 굳이 안쓰고 바로 VALUES부터 작성해도 가능하지만 굳이 명시하는 이유는 컬럼이 많으면 햇갈리기때문에 가독성차이
또는 원하는 컬럼만 작성할수도 있기때문에 편리하다
테이블 컬럼 생략시에는 VALUES에 모든 컬럼을 전부 입력해야한다

varchar2는 4000자가 최대값이다. 그 이상은 clob를 사용해야함 

<del></del> 태그는 취소선 태그 
<pre></pre> 태그는 줄바꿈이나 문단을 html이 아닌 사용자 문법으로 맞춰주는 태그
