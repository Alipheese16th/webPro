 # 패턴 (디자인 패턴)  
  
 ### 패턴이란 
 객체지향 개념이 등장한 이후로, 객체 지향 언어의 장점을 모아 가장 효율적으로 개발을 
할수 있게 만들어 놓은 틀, 디자인 패턴.  
 - 디자인 패턴의 종류는 생성 패턴 (5개) + 구조 패턴 (7개) + 행동 패턴 (11개)로 
이루어져 있습니다. 오늘은 두가지를 배울 예정입니다.
  
 ### 1. 싱글톤 패턴 (SingleTon Pattern)  
 싱글톤 패턴은 인스턴스를 오직 1개만 생성하고 이를 리턴해주는 패턴이다. 
생성자가 여러차례 호출되더라도 실제로 생성되는 객체는 하나이고, 
이 객체에 접근할 수 있는 전역적인 접촉점을 제공하는 패턴. 
데이터베이스 연동 등 하나의 객체로만 사용하는 경우에 쓰는 패턴이다.
 그래서 싱글톤 패턴은 객체 인스턴스를 2개 이상 생성하지 못하도록 막아야 한다.
private 생성자를 사용해서 외부에서 임의로 new키워드를 사용하지 못하게 막고,
getInstance() 메소드와 static필드를 활용해서 인스턴스를 호출 할수 있다.

 
 ### 2. 스트레티지 패턴 (Strategy Pattern) 전략 패턴   
객체의 부품화.  
알고리즘군을 정의하고 각각을 캡슐화 하여 교환해서 사용할 수 있도록 만든다.
스트레티지를 활용하면 알고리즘을 사용하는 클라이언트와는 독립적으로 알고리즘을 
변경할 수 있다. 여러 옵션들마다의 행동들을 모듈화 해서 독립적이고 상호교체 가능하게 만드는 것.
스트레티지 패턴의 가장 큰 특징은 '실행 중에 수행하는 알고리즘을 변경 할 수 있다는 점'이다. 




