12_SpringBoot  ch01 ~ ch02


# 오늘 이력서 작성 마무리하기

팀프로젝트 사용한 오픈소스라이브러리

부트스트랩별점
부트스트랩셀렉트
다음우편번호
jquery데이트피커
섬머노트
결제api아임포트

--------------------------------------

# 어제 이어서 node.js 와 MongoDB를 활용한 웹프로젝트

어제는 db에 insert, select, delete 하는것을 해봤다

오늘은 상세보기, 수정하기를 처리해볼것

노드에서 파라미터를 전달할때는

/product?name=홍길동&age=11 이렇게 전달하지않고
/product/홍길동/11   이렇게 전달한다

컨트롤러에서 request.params.파라미터 이런식으로 활용가능


CRUD 중에 수정을 해볼건데 put 방식으로 해볼것이다 이건 ajax를 활용해야만 쓸수있는 방식


CRUD 다배우고 노드수업은 끝

---------------------------

5/11 ~ 12 SpringBoot(Java 웹프레임워크)
-- IDE1(sts4-4.15.3) - maven
-- IDE2(IntelliJ) - gradle(thymleaf 엔진)

Spring -> Spring Boot(maven) -> Spring Boot(gradle)

sts4 툴을 설치할것인데 해당 경로에서 cmd 키고
java -jar 파일명 하면 jar 파일을 설치한다
파일명이 길면 첫문자좀쓰고 tab키누르면 알아서 파일명 찾음

sts3으로도 스프링부트를 사용할순있으나 버전이 낮아서 할수없는게 좀있다
생략이 많이 되는 최신버전을 이용하는게 좋다

또한 sts3에서도 적용했듯이 이번 sts4에도 lombok은 같이 설치해서 적용하는게 좋다. lombok이 있어야 편함
lombok.jar 파일도 cmd로 java -jar 하면 인스톨창이 열리고 경로 설정은 sts4 디렉토리안의 SpringToolSuite4.exe 를 지정


스프링부트 버전은 2.7.11 로 간다

- Spring Boot 수업 차례
(1) maven 라이브러리 - sts4

(2) gradle 라이브러리 - 인텔리J
    cf)젯브레인社 - 인텔리J(자바, 스프링 개발)
                      - pyCharm (python 웹 개발)
                      - 안드로이드 스튜디오(코틀린)

spring.io 사이트에서 Projects 탭에 들어가서 Spring Boot 탭의 Learn 탭에 Documentation 을 확인하면 원하는 버전별 사전을 참고할수있다

Eclipse Marketplace 마켓플레이스에서
 - Eclipse Enterprise Java and Web Developer Tools 3.2x 설치하자
이게 있으면 html 문서에서 반복문이라든가 사용가능

start.spring.io 사이트에서 프로젝트를 생성할수있다
이클립스에서도 스프링부트프로젝트 생성가능 

dependency : spring web / Lombok / Spring Boot DevTools / thymeleaf
위 4개 의존성 추가하면됨

오라클드라이버, jdbc, 마이바티스드라이버 등도 추후에 추가할예정

스프링부트 프로젝트를 살펴보면 기존 스프링프로젝트랑 구조가 살짝 다르다
WEB-INF 폴더도 없고 web.xml도 없고 이것저것 바뀌어있다


db.properties 파일등 이것저것 설정했던 것은 application.properties 파일에서 전부설정하면된다
css 등 정적 문서파일은 static 폴더에
view파일은 templates 폴더에서 한다


-- 점심먹고 컨트롤러부터 만드는중

실무에서는 에러잡으려고 System.out.println()를 사용했지만 실무에서는
lombok의 기능인 @Slf4j 를 사용한다
log를 자동적으로 추가해주는 어노테이션

로그를 왜사용하냐 개발중에는 sysout으로 확인할수있지만 배포한 후에는 확인이 안되니까 로그에 기록을 해두는것이다

그리고 그동안은 컨트롤러에서 매핑을
@RequestMapping(value="/", method=RequestMethod.GET)
이렇게 사용했었지만 이제는
@GetMapping("/") 라고 간단하게 사용가능

그동안 뭔가 매개변수보내고 할때마다 한글도 깨져서 설정하고 했는데 스프링부트에서 기본적인 그런 설정을 다 해주기때문에 프로젝트만들때마다 그런 귀찮은 작업을 생략가능

아까 프로젝트만들때 타임리프 디펜던시를 추가했으니 기본적으로 타임리프엔진이 html에 탑재되어있다. 그래서 jsp처럼 model의 값을 받아올수있는데

<h2 th:text="'컨트롤러에서 넘어온 인사말 : '+${greeting}">넘어온 인사말 없음</h2>

타임리프 엔진이 탑재되어있다면 인사말이 나올것이 없다면 인사말이 없다고 나올것이다

---
그리고 conPath가 필요없다 기본 빈스트링이 앞에 conPath처럼 붙어있다고 생각하자 스프링부트는 컨텍스트루트가 없음
그냥 로컬호스트:8080 하고 그다음 경로하는거
---

/ 로 시작하면 루트부터시작하는거


----------------------------지금까지 연습용 첫프로젝트

앞으로 메이븐라이브러리 프로젝트 2개
그레이들라이브러리 프로젝트 2개 를 해볼것

메이븐 프로젝트 생성

---
프로젝트만들때 타입 지정하는데 jar war 고르는건 배포용이다
war로 배포하면 클라이언트pc에 톰캣도 깔고 거기에 war를 넣어야하는데
스프링부트의 jar는 자동적으로 안에 포함되어있어서 배포가편함
---

의존성은 spring web /  JDBC api /  Oracle Driver / Mybatis framework   / Lombok / Spring Boot DevTools
6개 추가

jdbc api 는 데이터소스빈객체 생성하는거 (커넥션풀)
오라클 드라이버는 당연히 해당 데이터베이스관련 드라이버가 필요

그럼 자동적으로 pom.xml에 의존성이 추가되는데 우리가 그동안 사용해왔던 ojdbc6 이 아닌 ojdbc8 이 적용되어있다 
db.properties 파일의 구성이 조금 바뀌어서 적용시키면된다

★ pom.xml에 dependency 추가

<!-- JSP 파일 사용하기 위한 -->
<dependency>
	<groupId>javax.servlet</groupId>
	<artifactId>jstl</artifactId>
</dependency>
<!-- 톰캣 -->
<dependency>
	<groupId>org.apache.tomcat.embed</groupId>
	<artifactId>tomcat-embed-jasper</artifactId>
</dependency>

---
그리고 스프링에서는 데이터소스를 직접만들고 db.properties를 내마음대로 정의했는데 이제 스프링부트에서는 알아서 만들어주기때문에 프로퍼티스 설정파일은 정해진 이름으로 만들어야한다

mybatis-config 파일도 자동적으로 구성하기때문에 정해진대로 만들어야한다
---

★ application.properties에 추가

server.port=8090

spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@localhost:1521/XE
spring.datasource.username=scott
spring.datasource.password=tiger


★ application.properties에 추가

# vo location
mybatis.type-aliases-package=com.lec.emp.vo

# xml location
mybatis.mapper-locations=classpath:mappers/**/*.xml

-----

스프링부트에서는 dao 라는 용어보다 repository 라고 부름





















----------복습

form태그에서 action="/write" 로 input name="title" 이라고 보낸 매개변수는 컨트롤러에서 app.post('/write', function(request, response){
	request.body.title 로 값을 받을수 있고
});
즉 form태그 안의 매개변수들은 리퀘스트 바디에 차곡차곡 실리는거

rest api 방식의 매개변수를 보내는 /write/홍길동 이렇게 보낸다면
app.post('/write/:name',function(request,response){
	request.params.name  이렇게 받을수있다
});
즉 url 에 params로 실리는거


----구글검색
rest api
node.js  render()