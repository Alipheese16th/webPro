# 13장 게시판 (답변, 페이징) 예제

1. DTO
2. DAO
3. 에러페이지
4. 글목록 list.jsp
5. 글쓰기폼 writeFrom.jsp
6. 글쓰기처리 writePro.jsp
7. 글내용보기 content.jsp
8. 글수정폼 updateForm.jsp
9. 글수정처리 updatePro.jsp
10. 글삭제폼 deleteForm.jsp
11. 글삭제처리 deletePro.jsp

어제 이어서 5번 글쓰기폼부터
--------------------------------
글쓰기 가능한 페이지부터 만들어본다.
5.글쓰기폼 페이지는 그냥 인풋상자 정렬하면됨
6.글쓰기처리에서는
사용자에게 입력받을 값은 작성자,글제목,글본문,이메일(널가능),비번 이 있고
ip주소는 프로세스단에서 리퀘스트객체에서(getRemoteAddr) ip주소만 가져와서 dto에 set으로 집어넣는다.
그러고 dao 이용해서 insert하면 끝

7.글내용보기
매개변수로 글번호를 받아왔을테니 해당 글번호로 글을 출력해야한다
단 매개변수가 없을경우엔 null일테니 if문으로 처리해서 list 페이지로 다시 보내야함 
매개변수가 있을경우엔 
조회수를 올려줘야한다. 상세보기이기때문에. 조회수올려주는 메소드 사용
글번호랑 글제목은 그냥 dto에서 get으로 출력하면됨
본문글을 출력할때는 <pre>태그로 감싸줘야 작성했을때의 줄바꿈이 그대로 유지된 상태로 출력이 된다.
<pre></pre> 은근히 유용하니 꼭 기억하자.
이메일 출력할때는 아무것도 안적었을경우 null이 출력될테니 보기안좋다. 삼항연산자로 빈문자열로 처리하자.
또한 수정버튼과 삭제버튼이 필요하다.
조회수도 출력할때 +1 을 해야하는게 dto를 처음에 가져왔기때문에 조회수올리는 로직이 후에 나와서 출력할때는 그 전 기준으로 출력해버린다.
수정,삭제,답변,목록 버튼을 생성하고 페이지전환할수있게 onclick부여
수정이나 삭제버튼은 파라미터로 글번호를 넘겨줘야 해당 글번호에 맞는 글을 수정,삭제할수있다.

8.글수정폼 updateForm.jsp
글쓰기폼이랑 스타일이 같아야하고, 그전에 있던 내용이 출력되어 있어야한다
매개변수로 글번호를 받아와서 dao로 글번호에 해당하는 dto를 가져오기
form태그 부분은 수정전 내용 value는 출력해야하는데
null이 들어있을수도 있는 경우는 null이 출력되기때문에 삼항연산자등으로 처리
수정이 불가능한 항목도 있으니 (작성자) readonly가 필요하다
수정가능한 항목도 notnull인경우 싹다 지우고 수정하면 안되니 required 속성도 필요

글수정 쿼리를 다시 확인해보면 수정할 항목도 파라미터로 프로세스단에 넘길것이지만
num 글번호도 넘겨야하는데 이건 입력받을것도 아니고 어디 보일것이 아니기때문에 input type hidden을 사용한다 

9. 글수정처리 updatePro.jsp
글수정폼에서 사용자가 입력한 매개변수를 바탕으로 처리를해야하기때문에 
자바 빈 태그를 활용해서 파라미터를 받는다.
그냥 지금 업데이트를 하기엔 문제가 있는데 ip는 사용자에게 입력받는것이 아니다.
ip를 reqeust에서 받아서 dto에 set한다.

10. 글삭제폼 deleteForm.jsp
삭제프로세스단에 넘겨줘야할 값은 두개다. 글번호, 비밀번호
애초에 글삭제폼으로 들어오는 입구가 글상세페이지에서 버튼을 누르는것이니까
매개변수로 글번호는 받아서 올것이다.

11. 글삭제처리 deletePro.jsp
파라미터로 글번호, 비밀번호를 받는다
dao의 메소드를 이용해서 처리한다.
리턴값 int로 확인해서 삭제성공시와 실패시 처리를 다르게한다.
------------------------------------------------------------------------
# 페이징 기법을 해볼것이다.

어제부터 만들었던 사이트 기초틀을 프로젝트 채로 복사 해올것인데
웹프로젝트를 함부로 복사해서 실행하면 큰 문제가 발생할수 있다.
Context root 를 확인해보니 둘다 같은 이름으로 되어있다. (충돌이 난다)
톰캣에서 에러가 발생하기시작하면 기존에 잘 되던 프로젝트까지 안되기 시작한다.

프로젝트 복사시
★ 반드시 프로젝트 우클릭 - Properties - Context root
컨텍스트 루트를 바꿔야한다.

우선 페이지를 나누기전에 글이 너무적어서 반복문을 통해서 글을 많이 만들어보았다.

이제부터는 글을 전부 출력하는게 아니고
list.jsp == list.jsp?pageNum=1
처음 들어간 화면은 첫페이지를 보이게 하는것이다.

한페이지당 글 수(PAGESIZE), 블록당 페이지 수(BLOCKSIZE),현재 몇페이지인지(pageNum), 시작번호(startRow), 끝번호(endRow), 페이지수(pageCnt), 시작페이지(startPage), 끝페이지(endPage)
등등 필요한 변수나 로직이 많이 생긴다

우선 쿼리문부터 더 추가해야한다
지금까지는 그냥 전부 리스트 출력이었는데
TOP-N구문을 이용해야한다 
쿼리문에서 탑앤구문을 작성하고 dao에 원래 리스트 출력하던 메서드를 복붙해서 오버라이딩
매개변수에 시작번호(startRow), 끝번호(endRow) 를 받아서 원하는 만큼만 출력하는 로직

---------
현재페이지에 따라서 시작번호와 끝번호가 달라질텐데 그걸 구하는 공식이 이것이다.
시작번호(startRow) : (현재페이지 - 1) * 페이지당 갯수+ 1
끝번호(endRow) : 시작번호 + 페이지당갯수 - 1

list라는 jsp문서에 들어올때 pageNum 매개변수가 몇이냐에 따라 현재 페이지가 달라질것이고 처음방문시에는 null이니까 기본값을 1로 주자. 
그러고 pageNum을 int currentPage로 형변환 시키고 currentPage가지고 위의 공식을 이용해서 시작번호와 끝번호를 구하면 원하는 등수의 글만 출력이 가능하게 된다.

String pageNum = request.getParameter("pageNum");
if(pageNum==null) pageNum = "1";
int currentPage = Integer.parseInt(pageNum);
final int PAGESIZE = 10, BLOCKSIZE = 10;
int startRow = (currentPage - 1)*PAGESIZE + 1;
int endRow = startRow + PAGESIZE - 1;
---------
이제 목록은 끝났고 하단에 페이지를 출력해야한다. (이전 1 2 3 4 5 다음)
여기서 필요한건 시작페이지(startPage) 끝페이지(endPage)
현재페이지와 블록사이즈에 따라 시작페이지와 끝페이지를 구해서 범위를 출력해야하고 
그 페이지마다 a태그로 페이지전환도 가능하게 해야한다. 단 현재페이지는 이동 안함 

페이지 수 : Math.ceil( (double)전체글갯수/페이지당갯수 )
시작페이지 : ((현재페이지-1)/블록당페이지수)*블록당페이지수 + 1
끝페이지 : 시작페이지 + 블록당페이지 수 - 1

전체페이지수가 필요한 이유
전체 페이지가 23페이지면 시작~끝페이지가 21~30 일수가 없기때문 

int pageCnt = (int)Math.ceil((double)totalCnt/PAGESIZE);
int startPage = ((currentPage-1)/BLOCKSIZE) * BLOCKSIZE + 1;
int endPage = startPage + BLOCKSIZE - 1;
if(endPage>pageCnt){
	endPage = pageCnt;
}
if(startPage > BLOCKSIZE){
	out.println("[ <a href='"+conPath+"/board/list.jsp?pageNum="+(startPage-1)+"'>이전</a> ]");
}
for(int i=startPage;i<=endPage;i++){
	if(i==currentPage){
		out.println("[ <b>"+i+"</b> ]");
	}else{
		out.println("[ <a href='"+conPath+"/board/list.jsp?pageNum="+i+"'>"+i+"</a> ]");
	}
}
if(endPage<pageCnt){
	out.println("[ <a href='"+conPath+"/board/list.jsp?pageNum="+(endPage+1)+"'>다음</a> ]");
}
--------

이제 페이지 전환이 있을때마다 현재 페이지가 몇페이지였는지 저장이 되어있어야
글을 수정이나 삭제를 하더라도 목록에 돌아왔을때 몇페이지였는지 출력이 된다.
쿠키를 하던 세션을 하던 리퀘스트매개변수로 지정을하던 뭔가를 계속 넘겨줘야 유지가되는것.

이번에는 선생님이 그냥 파라미터로 넘기는예시로 해보았다











---------
복습
form태그 안에서 <button></button>태그를 사용하면 submit이 일어나버리기때문에
아무능력없는 버튼이 필요하면 input type="button"을 사용해야한다

form태그 밖에서는 둘다 상관없음 

이클립스에서 프로젝트를 닫는다고 브라우저에서 실행이 안되는게 아니다
톰캣 폴더에 복사해온 것으로 실행하는것이기때문. 서버만 켜져있으면 된다.