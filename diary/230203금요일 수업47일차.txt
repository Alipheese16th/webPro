5장 함수를 이용한 component

함수컴포넌트의 장점.
클래스와는 다르게  import React, {Component} from 'react';
할 필요가 없다.

클래스가 아니라서 객체로서 메서드를 사용하는게 아니라 this는 사용하지 않고 의미도없다.
단 함수를 정의할때 매개변수로 props를 받는다.
클래스에서는 constructor에서 매개변수로 받았던것.

상위 컴포넌트에서 하위컴포넌트에 데이터를 전달할때 props로 전달한다.
하위컴포넌트에서는 받은 props를 수정할수없다(ReadOnly)
단 수정할 필요가 있는경우 하위컴포넌트 안에서 state로 만든 후, setState를 사용해 변경될때마다 재렌더링을 한다. 한글자 한글자 변경될때마다 렌더링되는것.

state가 필요한이유 : 데이터가 변경되도 페이지는 그대로다. 재렌더링이 필요하다. 렌더링(표현하다, 그리다는 뜻) state를 바꾸는 함수를 사용해야 값도 바뀌고 렌더링도 다시 되게 하는 구성이 함수에 들어있다.

state를 만들때는 클래스와 함수의 방식이 조금 다르다. 
클래스에서는 내장데이터로 this.state 를 정의해서 데이터를 넣고 setState()를 호출해 변경하는 등 사용했었다.

함수에서는 state를 선언,구성할때 Hook을 이용해야한다.
import React,{useState} from 'react'; 로 불러와야하고,
const [state데이터,state바꾸는함수] = useState(초기값);
후에 state바꾸는함수를 호출해서 매개변수로 바꿀값을 넣으면 되는것이다. 

이벤트 거는것은 특이한것은 없고 다 비슷한데 this가 필요없다는것 정도

오전까지 READ 구성만 했음
----------------
오후 CREATE UPDATE DELETE

mode를 if-else if 조건으로 구성해서 RCUD 를 만들자.
read일경우와 create일경우 컴포넌트를 각각 따로만들어서 article 부분에 작성시키자.




------복습----
함수형 리액트 파일 구성시 주의 state 세팅할거면 
import {useState} from 'react';  불러와야함


부분적으로 렌더링이 필요한경우
클래스 컴포넌트에서는 아래의 메서드를 정의하면된다.
shouldComponentUpdate(newProps){
	if(newProps.data === this.props.data){
		return false;
	}
	return true;
}


