# 어제 이어서 jsp 계속

중간중간에 스크립트릿 사용하면서 사용하기엔 가독성이 너무떨어진다. 후에 mvc 패턴을 사용하기전까지는 배우는단계라 어렵게 배우자.

jsp에서 쓸수있는 내부객체 request
사용자가 브라우저에서 요청을 하면 생성되는 객체
jsp를 요청받으면 톰캣은 jsp를 java파일로 바꾸고 자바컴파일러가 컴파일한다.
톰캣이 컴파일된 class파일을 실행하고 html로서 요청에 응답한다.

브라우저F12개발자도구-네트워크탭에서 submit시 확인해보면 리퀘스트객체를 확인할수있다
Request Headers - 편지봉투처럼 겉부분의 정보

request.getParameter(parameter)
이전사이트 form태그로 입력받은 값을 받아오는 메소드.

form 태그 method는 여러가지가 있지만 웹개발에서는 대표적으로 2가지
get방식(url에 정보가보임:naver검색창), 
post방식(숨겨서 들어오는정보:패스워드 등)

유효성검사는 두번째페이지보다 submit에서 자바스크립트로 유효성검사하는게 부하가 적다.

---예제 입력받고 구구단 출력하기
잘 만든줄알았는데 
input value 값이 string이었다.
자바스크립트에서 그냥 비교하면 아스키코드값으로 비교하기때문에
음수를 비교한다든가 하면 이상하게 비교가 된다.
넘버타입으로 바꿔줘야한다. (근데 어차피 1~9의 수만 입력받을거면 큰상관없을듯) 
----예제 로그인화면 
get방식을 사용하는경우
255문자 이하일 경우(간단하게 사용)
255문자 이상일때 post방식

get방식이 아닐때의 문제점 ex. post 방식
문자를 encoding해서 전송하기때문에 한글이 깨진다.
파라미터로 받기전에 utf-8 방식으로 받는다고 메소드를 불러야한다 
request.setCharacterEncoding("utf-8");

jsp맛보기 여기까지
------------------------------------
# 3장 서블릿 맛보기
html안에 자바소스가 들어있는것 -jsp
자바안에 html이 들어있는 것 -서블릿

서블릿에 대해 알아본다

일반적인 자바파일을 컴파일한 클래스파일을 브라우저로 구동시키는건 불가능
HttpServlet을 상속받은 클래스파일이 서블릿이다.

자바 thread를 이용하여 동작한다. 서버에 부하가 많이 걸리지 않는다.

자바로직이 많이 필요한 부분 Controller에 서블릿을 이용
html이 많이 쓰이는 부분 View에 jsp를 이용
Model 부분에 dao , dto

프로젝트 내에
java resources - src 안에는 java
WebContent 안에는 html,css,jsp
즉 서블릿은 src안에 만들어야한다.

서블릿을 만들때는
일반 클래스로 만들면 상속,별명,매핑 등등 신경쓸게 많지만 간편하게 툴로 만들수있다.
new - servlet

서블릿은 클래스이름은 클래스이름이고  서블릿 이름이 따로있다. 매핑 url 이름도 따로 지정할수 있다.

서블릿이 구동되면 요청받은 메서드 종류에 따라 서블릿내의 메서드가 구동된다.
doGet,doPost 메서드를 오버라이딩하면 된다.
그냥 url로 요청해서 접속하면 doGet메소드가 실행되는것.
post방식으로 들어오면 doPost가 실행.
a태그의 href속성이나 location객체의 href속성또한 get방식으로 접속한다.

서블릿이 실제로는 다른곳에 있지만 WebContent(루트)에 있다고 생각하고 해야 좀 편하다. 앞으로 우리는 프로젝트를 하면서 수많은 파일을 만들것이기때문에 폴더별로 정리를 해야한다.
상대적인 url을 머릿속에 생각하자.
WebContent가 루트폴더
../  상위폴더의
asdf/  하위폴더asdf내

클래스 내에 서블릿 이름과 매핑url을 지정하지않고 web.xml에 지정할수도 있다.
web.xml을 열고 안에서 서블릿 클래스 이름, 서블릿 이름, 매핑 url 을 지정한다.
추가정보
https://gmlwjd9405.github.io/2018/10/29/web-application-structure.html

서블릿을 한번 또 만들어봤다
doGet 메서드를 오버라이딩해서 작성.
PrintWriter out = response.getWriter();
out.println("<html>");
이런식으로 작성하면 반영이된다.

나중에 프로젝트가 커지면 파일이 많아지는데 
webcontent 밑의 css 폴더 등등 경로가 복잡해진다.
다른 경로를 찾을때 자신의 경로 기준과 상대 경로가 햇갈릴 경우가 많다.
WebContent 가 context root 라는걸 잊지말고
/context_root/.... 라고 경로를 시작하면 / 로 시작하는게 최상위 루트이기때문에
어디서든지 쓸수있는 경로다.

jsp는 수정후 새로고침하면 바로 반영이 된다. 
서블릿은 서버를 껏다 켜야 반영이 된다.

클라이언트가 요청을 하면 응답과 요청이 처리되는 객체가 생성되는데,
서블릿 파일은 HttpServletRequest, HttpServletResponse 두 객체가 생성이 된다. 
jsp는 request, response 두 객체가 생성된다.

서블릿 이라는 것은 서버를 종료하지 않는이상 계속 메모리에 계속 떠있다.


--잡담(미래의 목차 이야기 등)
로그인을 해도 서버에서는 바로 로그인 정보를 잊어버린다. 다시 로그인하는건 말도안되지. 그래서 필요한게 쿠키(내컴퓨터에 남기는 정보) 세션은 서버에 남기는 정보.

12장 커넥션풀 : 데이터베이스 연동은 시간이 오래걸리고 부하가 심하기때문에 미리 객체를 만들어놓는다.(마치 장사전에 치킨을 미리 튀겨놓는것)
13장 게시판(답변, 페이징) 예제  - 제일 중요한 날이다. 
14장 파일첨부 : 서버에 두면 파일이 날라가기때문에 파일 카피하는 로직이 필요.
15~18장 mvc패턴 준비작업
19장 mvc패턴 활용

이클립스에서 프로젝트 익스플로러를 보면 확인할수있는 Servers는 계속해서 구동되는 서버의 그것이다. tomcat 경로에 conf 폴더내에 있는것과 같다.

---------------------------------
4장 서블릿 웹프로그래밍

jsp파일은 구동되기전에 톰켓파일경로의 work파일내에서 컴파일되어서 html로 읽어들이게되는데 이것이 서블릿으로 변환되는것이다. 들어가서 확인해보면 우리가 배운 서블릿과 흡사하다.

post방식은 데이터를 전송할때 인코딩해서 보내기때문에 한글이 깨지지 않으려면
request에서 정의해줄필요가 있다.
request.setCharacterEncoding("utf-8");

내가 화면에 출력하는건 response에서 정의한다
response.setContentType("text/html; charset=utf-8");

만약 복수의 파라미터를 받는다면? 혹은 하나도 못받는다면?

String[] menu = request.getParameterValues("menu");
배열로 받는 메소드 








----
다이나믹 웹 프로젝트 새로 생성시 마지막에 generate web.xml 하는걸 체크를 까먹으면
프로젝트 내 Deployment Descriptor 를 우클릭해서 generate Deployment Descriptor stub를 클릭하면 WEB_INF 디렉토리 내에 web.xml이 생긴걸 확인할수 있다.



---구글검색
PrintWriter 와 response.getWriter()
request response 객체
httpservlet 추상클래스
dynamic web project
web.xml
url 과 uri
serialVersionUID

----복습
select태그 option태그

### 자바에서 변수의 초기화를 하지 않을경우
자바에서 변수는 원래 초기화시키지않아도 초기값이 있다.
숫자는 0 , 불리언은 false , string 등 참조타입은 null로 초기값이 정해져있다.
다만 지역변수는 초기화를 시켜주지않으면 에러가난다. 전역변수는 괜찮다.
그 차이는 전역변수는 클래스 내의 멤버변수로 Heap 영역에 메모리가 저장되고, 
지역변수는 메소드나 생성자 내의 변수이기 때문에 Stack 영역에 메모리가 저장되기 때문입니다. Stack 영역에 할당된 변수는 자동 초기화가 되지 않습니다.
