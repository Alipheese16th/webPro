# 5장 JSP 내부객체 

### out객체

// out.print() 만 알고있어도 문제는 없다

버퍼공간에 작성을 해놓고 flush작업을 해야 출력이 된다. 기본 버퍼공간 (8kb)

버퍼의 크기 : out.getBufferSize()
버퍼의 남은 크기 : out.getRemaining()

out.println 을 하면 버퍼공간에 작성을 하는것이다. flush를 하면 화면에 출력하는것. flush는 자동적으로 해주니까 특별한경우가아니면 신경쓸필요없다

톰캣은 소스폴더가 수정되면 다시 통채로 서버폴더에 복사한다.
이런식으로 계속 갱신되기때문에 후에 파일첨부게시판을 만들때 파일첨부를 서버폴더에 하면 다시 지워집니다.

-----
### application 객체

// application.getRealPath() 가 중요

String conPath = request.getContextPath(); // "/ch05_jsp"
String appPath = application.getContextPath(); // "/ch05_jsp"
String absolutePath = application.getRealPath("."); // 현재 프로젝트가 실행되는 절대경로

conPath = /ch05_jsp
appPath = /ch05_jsp
absolutePath = D:\webPro\IDE\apache-tomcat-9.0.71\wtpwebapps\ch05_jsp

이 절대경로를 사용해서 WEB-INF에 있는 첨부파일을 IO 입출력 할수있다.
Reader FileReader 객체 사용해서 출력.
자바에서는 try-catch절이 필수지만 jsp에서는 사용하지않아도 쓸수는 있다. 어차피 찾는 파일이 없으면 브라우저에서 500에러가 날뿐.
그러나 후에 mvc패턴으로 사용할때는 try-catch절도 명시해줘야한다.

-----
이클립스 없이 직접 배포해보기
note 폴더의 0206_2.jsp동작원리.txt
-----

-----------------------------------------------------------------
# 6장 액션태그

이제까지는 html에서도 쓸수있는 태그를 써왔다
JSP에서만 쓸수 있는 태그를 알아보자

1. 표준액션태그 - 기본적으로 구현되어있는 태그
2. 커스텀 액션태그 - 라이브러리 설치해야 쓸수있는 태그 (사람들이 만듬)

커스텀액션태그는 17(JSP stanard Tag Library)장에서 알아볼것이다. 
오늘은 표준액션태그를 배울것이고, 10장(자바빈)에서도 또 쓴다.

우선은 forward, include, param 태그만 살펴보고, 추후 bean을 학습할 때 추가로 bean 관련 태그를 살펴본다.

★액션태그는 단독으로 사용시 /> 닫아주는걸 반드시 해줘야 한다. 
-----
### forward

우리가 전에 배웠던 response.sendRedirect() 의 경우는
실행시 새로운 request객체가 만들어져서 새로운 요청으로 인해 사이트가 바뀌게 된다. 즉 첫 요청에 입력한 파라미터는 사라지게 된다.

그러나 이 첫 요청의 파라미터를 그대로 안고 가서 다른 사이트로 넘어가는 방법이 있는데 이것이 forward 태그를 사용하는것 .
<jsp:forward page="경로"/>
리퀘스트 객체는 바뀌지않고 그대로 url(요청)을 유지하고 사이트만 이동하는것.

-----
### param

<h1>ex3_param.jsp 입니다</h1>
<%-- ex3_param.jsp?n=1 --%>
<jsp:forward page="ex4.jsp">
	<jsp:param name="id" value="aaa"/>
	<jsp:param name="pw" value="111"/>
</jsp:forward>

파라미터 설정하는 태그
결과는 ex4.jsp로 넘어가는데 url은 ex3_param.jsp?n=1 로 유지되고 파라미터는 3개(n,id,pw)가 넘어간다.

아래의 include태그에도 사용가능하다
가져올때 매개변수를 적용하는것
forward는 보낼때 매개변수를 적용하는것

-----
### include

<%@include file="" %> 지시자의 include와 다른점을 알아보자 

지난주 금요일에 <%@include 를 사용하다가 에러난적이 있다. 왜 에러가 낫냐
include를 이용해 파일을 가져오면 해당 코드를 그대로 복사붙여넣기를 한것과 같다. 
즉 <% String conPath = request.getContextPath(); %> 이게 2개가 되어버린것이다. 선언을 두번해서 에러난것.

또다른 include방법이 jsp:include 액션태그 

<jsp:include page=""/>

해당문서의 해독내용 html을 include 해주기때문에 에러가 안난다.

-----
회원가입 로그인 예제 pdf파일 대로 해보기.
로그인 시도하면 loginPro.jsp로 가서 id와 pw를 비교하고 틀리면 response.sendRedirect() 로 다시 전사이트로 가서 
아이디와 비번이 틀리다고 출력하기.
회원가입클릭은 a태그 로그인클릭은 form태그 submit
회원가입사이트에서 로그인버튼은 input type="button" onclick="location.href=''"

------------------------------------------------------------------
# 7장 쿠키 (중요)

< 클라이언트 > , < 웹서버 , WAS(웹어플리케이션서버), DB(데이터베이스) >
클라이언트가 jsp파일을 요청(request)하면
jsp를 servlet으로서 compile해서 class파일로 만들고 
html문서를 응답(response)한다

response를 하고나서 관계를 바로 끊어버린다.(무서버상태) http프로토콜의 특징
로그인을 하더라도 다음사이트에서 바로 잊어버리기때문에 문제가생긴다.
이래서 필요한게 쿠키. 연결이 끊겼을때 어떤 정보를 지속적으로 유지하기 위한 수단으로 쿠키라는 방식을 사용한다.
쿠키는 300개까지만들수있다. 내용은 String (id정보쿠키 pw쿠키 닉네임쿠키 등등)
쿠키를 response객체에 실어서 보낸다. 클라이언트측(브라우저)에 쿠키를 저장
같은이름의쿠키는 덮어씌운다(유효기간갱신)

쿠키를 언제까지 저장 유지해야할까. 브라우저를 닫을때까지 저장하는경우도있고, 닫고열어도 유지되는경우도있다(시간)

세션은 쿠키(문자열)와 다르게 객체가 저장된다. 세션은 저장을 서버에서 하기때문에 보안에서도 철저하다.


### 이 4개의 문법이 기본
1.쿠키생성
2.쿠키리스트
3.특정 쿠키 찾기
4.특정 쿠키 지우기
-----

### 1.쿠키생성

 - 1. 쿠키 생성 Cookie 객체 new로 생성
 - 2. 쿠키 유효기간 설정 setMaxAge()  숫자당 1초  -1은 브라우저닫을때까지
 - 3. response에 탑재 addCookie()

### 2. 쿠키리스트 
쿠키는 (전에 생성되어서 )클라이언트가 가지고있다면 리퀘스트 객체에 담겨져있다.

Cookie[] cookies = request.getCookies();
모든 쿠키를 가져와서 반복문으로 출력해보기.
만약 히스토리를 지우면 쿠키가 아에없기때문에 에러 if문으로 null체크

### 3. 특정쿠키찾기
위의 리스트처럼 반복문으로 모든 쿠키를 가져온후에
조건문으로 특정이름과 쿠키이름이 같는지 대조해본후 해당 인덱스를 찾아서 쿠키를 찾는것.

### 4.특정 쿠키 지우기
위의 특정쿠키찾는 문법을 이용해 해당 쿠키이름과 같은 이름의 0초짜리 쿠키를 덮어씌운다. 혹은 해당 쿠키의 유효시간을 수정해도된다.
response객체에 탑재해야 클라이언트 쿠키에 적용된다. 
-------------------------

welcome페이지, 로그인페이지, 로그인체크페이지, 로그아웃페이지 작성
여기서 문제가 생겨서 중요한 부분을 알았다
welcome페이지에서 id와 name을 null로 초기화하고
쿠키리스트에서 id,name쿠키가 있다면 값을 가져와 출력하는 예제가있다.
id,name쿠키가 없다면 로그아웃 버튼이 생기는식.
그러나 여기서 id와 name을 처음에 초기화할때 <%! 선언부 %> 에서 전역변수로 선언하면 문제가 있는데 
사이트가 리로드되어도 전역변수는 맨처음에만 초기화되고 그다음부터는 값이 남아있기에 초기화가 되지않는다.
이런경우는 지역변수로 사용해야한다.

-----
헤더부분 로그인상태에 따라 모습을 다르게 하는 헤더 만들기.
id쿠키를 찾아보고 null이면 일때와 id가 있을때와 조건으로 다르게 만들면된다.


내일 할것
헤더 로그아웃은 클릭하면 화면은 그대로 메뉴만 바뀌는것







------금요일 시험
로그인을하는데 쿠키와 세션을 왜 이용해야하는가
서버에서 응답후 연결을 끊기때문에 로그인을 했는지 정보를 알기위해 데이터를 유지해야한다.

쿠키는 txt파일이나 db파일 형태로 클라이언트측에 저장
세션은 서버에 저장

서버에 요청할때마다 쿠키를 참조 또는 변경
세션은 용량제한,갯수제한같은것도 없다.

쿠키관련메서드들
------


구글검색-----
버퍼와 flush()

복습------
context path 와 context root

css경로를 이런식으로 하면
<link href="../css/style.css" rel="stylesheet">
이 문서는 include해오기 힘들다. 왜냐면 거기서 이 코드를 그대로 가져와서 쓰는거인데 그쪽 경로는 다를수있기때문
그래서 request.getContextPath()를 사용하는것